Index: app/src/main/java/com/example/myhealthpassport/Composables/HealthInfo.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.myhealthpassport.Composables\r\n\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.paddingFromBaseline\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.foundation.text.KeyboardOptions\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.automirrored.filled.ArrowBack\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.ExtendedFloatingActionButton\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.OutlinedTextField\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TextFieldDefaults\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateListOf\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.alpha\r\nimport androidx.compose.ui.draw.scale\r\nimport androidx.compose.ui.graphics.Brush\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.graphics.painter.Painter\r\nimport androidx.compose.ui.layout.ContentScale\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.text.TextStyle\r\nimport androidx.compose.ui.text.font.FontStyle\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.input.KeyboardType\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.navigation.NavController\r\nimport androidx.navigation.compose.rememberNavController\r\nimport com.airbnb.lottie.compose.LottieAnimation\r\nimport com.airbnb.lottie.compose.LottieCompositionSpec\r\nimport com.airbnb.lottie.compose.LottieConstants\r\nimport com.airbnb.lottie.compose.animateLottieCompositionAsState\r\nimport com.airbnb.lottie.compose.rememberLottieComposition\r\nimport com.example.myhealthpassport.R\r\n\r\nimport com.example.myhealthpassport.SignInSignUp.AnimatedPreloaderPatient\r\nimport com.example.myhealthpassport.ViewModels.HealthViewModel\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun HealthInfo(navController: NavController, healthViewModel: HealthViewModel){\r\n    var medicalID: String by remember { mutableStateOf(\"\") }\r\n    var name: String by remember { mutableStateOf(\"\") }\r\n    var bloodGroup: String by remember { mutableStateOf(\"\") }\r\n    var age: String by remember { mutableStateOf(\"\") }\r\n    var ageInt: Int by remember { mutableStateOf(0) }\r\n\r\n    var bloodPressure by remember { mutableStateOf(\"\") }\r\n    var systolicBP by remember { mutableStateOf(\"\") }\r\n    var systolicBPInt by remember { mutableStateOf(0) }\r\n\r\n    var diastolicBP by remember { mutableStateOf(\"\") }\r\n    var diastolicBPInt by remember { mutableStateOf(0) }\r\n\r\n    var errorMessage by remember { mutableStateOf(\"\") }\r\n\r\n    var bloodSugarLevel: String by remember { mutableStateOf(\"\") }\r\n    var bloodSugarLevelInt: Int by remember { mutableStateOf(0) }\r\n    var weight: String by remember { mutableStateOf(\"\") }\r\n    var weightFloat: Float by remember { mutableStateOf(0.0f) }\r\n    var height: String by remember { mutableStateOf(\"\") }\r\n    var heightFloat: Float by remember { mutableStateOf(0.0f) }\r\n    var gender: String by remember { mutableStateOf(\"\") }\r\n    var healthCondition: String by remember { mutableStateOf(\"\") }\r\n    var emergencyPhoneNumber: String by remember { mutableStateOf(\"\") }\r\n    var emergencyPhoneNumberLong by remember { mutableStateOf(0L) }\r\n\r\n    var address: String by remember { mutableStateOf(\"\") }\r\n    var allergies: String by remember { mutableStateOf(\"\") }\r\n    var medications: String by remember { mutableStateOf(\"\") }\r\n\r\n    val gradient = Brush.horizontalGradient(\r\n        colors = listOf(Color(0xFF00BCD4), Color(0xFF1E88E5))\r\n    )\r\n\r\n    val outlinedFieldColors = TextFieldDefaults.textFieldColors(\r\n        containerColor = Color.Transparent,\r\n        unfocusedIndicatorColor = Color.Transparent,\r\n        focusedIndicatorColor = Color.Transparent,\r\n        focusedTextColor = Color(0xFF181411),\r\n        cursorColor = Color(0xFF1E88E5) // Blue for cursor\r\n    )\r\n\r\n    val rowModifier = Modifier\r\n        .padding(top = 12.dp)\r\n        .background(Color(0xFFB2EBF2).copy(alpha = 0.3f), shape = RoundedCornerShape(12.dp))\r\n\r\n    val context = LocalContext.current\r\n    val scrollView = rememberScrollState()\r\n    val backgroundPainter: Painter = painterResource(id = R.drawable.healthcare)\r\n\r\n    Box(modifier = Modifier.fillMaxSize().background(color = Color.White)) {\r\n            Image(\r\n                painter = backgroundPainter,\r\n                contentDescription = null,\r\n                contentScale = ContentScale.Fit,\r\n                modifier = Modifier.matchParentSize()\r\n                    .alpha(0.5f),\r\n            )\r\n        Column(\r\n            modifier = Modifier\r\n                .padding(start = 16.dp, end = 16.dp, bottom = 0.dp)\r\n                .verticalScroll(scrollView)\r\n                .fillMaxWidth()\r\n                .background(color = Color.Transparent),\r\n            horizontalAlignment = Alignment.CenterHorizontally,\r\n            verticalArrangement = Arrangement.Center,\r\n        ) {\r\n\r\n            Text(\r\n                text = \"Add/Update Medical ID\", fontSize = 24.sp, fontStyle = FontStyle.Normal,\r\n                modifier = Modifier\r\n                    .padding(vertical = 12.dp),\r\n                color = Color.Black,\r\n                fontWeight = FontWeight.W500\r\n            )\r\n\r\n//            Surface(\r\n//                modifier = Modifier\r\n//                    .fillMaxWidth()\r\n//                    .paddingFromBaseline(top = 10.dp, bottom = 10.dp),\r\n//                color = Color.White\r\n//            ) {\r\n////                Box {\r\n////                    AnimatedPreloaderPatient(\r\n////                        modifier = Modifier\r\n////                            .size(300.dp, 200.dp)\r\n////                            .align(Alignment.Center)\r\n////                            .scale(scaleX = 1.3f, scaleY = 1.6f)\r\n////                    )\r\n////                }\r\n//            }\r\n\r\n            Text(\r\n                text = \"Medical ID\",\r\n                fontWeight = FontWeight.W500,\r\n                modifier = Modifier.align(Alignment.Start),\r\n                fontSize = 16.sp\r\n            )\r\n           Row(modifier = rowModifier,\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                OutlinedTextField(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .background(Color.Transparent),\r\n                    value = medicalID,\r\n                    onValueChange = { medicalID = it },\r\n                    label = {\r\n                        Text(text = \"Medical ID\")\r\n                    },\r\n                   colors = outlinedFieldColors,\r\n\r\n                    textStyle = TextStyle(fontSize = 18.sp),\r\n                )\r\n            }\r\n\r\n            Spacer(Modifier.height(8.dp))\r\n\r\n            Text(\r\n                text = \"Name\",\r\n                fontWeight = FontWeight.W500,\r\n                modifier = Modifier.align(Alignment.Start),\r\n                fontSize = 16.sp\r\n            )\r\n           Row(modifier = rowModifier,\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                OutlinedTextField(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .background(Color.Transparent),\r\n                    value = name,\r\n                    onValueChange = { name = it },\r\n                    label = {\r\n                        Text(text = \"Name\")\r\n                    },\r\n                   colors = outlinedFieldColors,\r\n\r\n                    textStyle = TextStyle(fontSize = 18.sp),\r\n                )\r\n            }\r\n\r\n            Spacer(Modifier.height(8.dp))\r\n\r\n            Text(\r\n                text = \"Blood Group\",\r\n                fontWeight = FontWeight.W500,\r\n                modifier = Modifier.align(Alignment.Start),\r\n                fontSize = 16.sp\r\n            )\r\n           Row(modifier = rowModifier,\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                OutlinedTextField(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .background(Color.Transparent),\r\n                    value = bloodGroup,\r\n                    onValueChange = { bloodGroup = it },\r\n                    label = {\r\n                        Text(text = \"Blood Group\")\r\n                    },\r\n                   colors = outlinedFieldColors,\r\n\r\n                    textStyle = TextStyle(fontSize = 18.sp),\r\n                )\r\n            }\r\n\r\n            Spacer(Modifier.height(8.dp))\r\n\r\n            Text(\r\n                text = \"Age\",\r\n                fontWeight = FontWeight.W500,\r\n                modifier = Modifier.align(Alignment.Start),\r\n                fontSize = 16.sp\r\n            )\r\n           Row(modifier = rowModifier,\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                OutlinedTextField(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .background(Color.Transparent),\r\n                    value = age,\r\n                    onValueChange = {\r\n                        age = it\r\n                        if (age.isNotEmpty()) {\r\n                            ageInt = age.toInt()\r\n                        }\r\n                    },\r\n                    label = {\r\n                        Text(text = \"Age\")\r\n                    },\r\n                   colors = outlinedFieldColors,\r\n\r\n                    textStyle = TextStyle(fontSize = 18.sp),\r\n                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number)\r\n                )\r\n            }\r\n            Spacer(Modifier.height(8.dp))\r\n\r\n            Row(Modifier.fillMaxWidth()) {\r\n                Column(\r\n                    Modifier\r\n                        .fillMaxWidth(0.5f)\r\n                        .padding(end = 4.dp)\r\n                ) {\r\n                    Text(\r\n                        text = \"Systolic BP\",\r\n                        fontWeight = FontWeight.W500,\r\n                        fontSize = 16.sp\r\n                    )\r\n                    Row(\r\n                        modifier = Modifier\r\n                            .padding(top = 12.dp)\r\n                .background(Color(0xFFB2EBF2).copy(alpha = 0.3f), shape = RoundedCornerShape(12.dp)),\r\n                        verticalAlignment = Alignment.CenterVertically\r\n                    ) {\r\n                        OutlinedTextField(\r\n                            modifier = Modifier\r\n                            .fillMaxWidth()\r\n                            .background(Color.Transparent),\r\n                            value = systolicBP,\r\n                            onValueChange = {\r\n                                systolicBP = it\r\n                                if (systolicBP.isNotEmpty()) {\r\n                                    systolicBPInt = systolicBP.toInt()\r\n                                }\r\n                            },\r\n                            label = { Text(\"Systolic (mmHg)\") },\r\n                            isError = errorMessage.isNotEmpty(),\r\n                            colors = TextFieldDefaults.textFieldColors(\r\n                                containerColor = Color.Transparent,\r\n                                unfocusedIndicatorColor = Color.Transparent,\r\n                                focusedIndicatorColor = Color.Transparent,\r\n                                focusedTextColor = Color(0xFF181411)\r\n                            ),\r\n                            textStyle = TextStyle(fontSize = 18.sp),\r\n                            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),\r\n                            singleLine = true\r\n                        )\r\n                    }\r\n                }\r\n\r\n                Column(\r\n                    Modifier\r\n                        .fillMaxWidth()\r\n                        .padding(start = 4.dp)\r\n                ) {\r\n                    Text(\r\n                        text = \"Diastolic BP\",\r\n                        fontWeight = FontWeight.W500,\r\n                        fontSize = 16.sp\r\n                    )\r\n                    Row(\r\n                        modifier = Modifier\r\n                            .padding(top = 12.dp)\r\n                .background(Color(0xFFB2EBF2).copy(alpha = 0.3f), shape = RoundedCornerShape(12.dp)),\r\n                        verticalAlignment = Alignment.CenterVertically\r\n                    ) {\r\n                        OutlinedTextField(\r\n                            modifier = Modifier\r\n                                .fillMaxWidth()\r\n                                .background(Color.Transparent),\r\n                            value = diastolicBP,\r\n                            onValueChange = {\r\n                                diastolicBP = it\r\n                                if (diastolicBP.isNotEmpty()) {\r\n                                    diastolicBPInt = diastolicBP.toInt()\r\n                                }\r\n                            },\r\n                            label = { Text(\"Diastolic (mmHg)\") },\r\n                            isError = errorMessage.isNotEmpty(),\r\n                            colors = TextFieldDefaults.textFieldColors(\r\n                                containerColor = Color.Transparent,\r\n                                unfocusedIndicatorColor = Color.Transparent,\r\n                                focusedIndicatorColor = Color.Transparent,\r\n                                focusedTextColor = Color(0xFF181411)\r\n                            ),\r\n                            textStyle = TextStyle(fontSize = 18.sp),\r\n                            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),\r\n                            singleLine = true\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (errorMessage.isNotEmpty()) {\r\n                Text(text = errorMessage, color = Color.Red, modifier = Modifier.padding(top = 4.dp))\r\n            }\r\n\r\n\r\n            Spacer(Modifier.height(8.dp))\r\n\r\n            Text(\r\n                text = \"Blood Sugar\",\r\n                fontWeight = FontWeight.W500,\r\n                modifier = Modifier.align(Alignment.Start),\r\n                fontSize = 16.sp\r\n            )\r\n           Row(modifier = rowModifier,\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                OutlinedTextField(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .background(Color.Transparent),\r\n                    value = bloodSugarLevel,\r\n                    onValueChange = {\r\n                        bloodSugarLevel = it\r\n                        if (bloodSugarLevel.isNotEmpty()) {\r\n                            bloodSugarLevelInt = bloodSugarLevel.toInt()\r\n                        }\r\n                    },\r\n                    label = {\r\n                        Text(text = \"Blood Sugar\")\r\n                    },\r\n                   colors = outlinedFieldColors,\r\n\r\n                    textStyle = TextStyle(fontSize = 18.sp),\r\n                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number)\r\n                )\r\n            }\r\n            Spacer(Modifier.height(8.dp))\r\n\r\n            Row(Modifier.fillMaxWidth()) {\r\n                Column(Modifier.fillMaxWidth(0.5f).padding(end = 4.dp)){\r\n                Text(\r\n                    text = \"Weight\",\r\n                    fontWeight = FontWeight.W500,\r\n                    modifier = Modifier,\r\n                    fontSize = 16.sp\r\n                )\r\n                Row(\r\n                    modifier = Modifier\r\n                        .padding(top = 12.dp)\r\n            .background(Color(0xFFB2EBF2).copy(alpha = 0.3f), shape = RoundedCornerShape(12.dp)),\r\n                    verticalAlignment = Alignment.CenterVertically\r\n                ) {\r\n                    OutlinedTextField(\r\n                        modifier = Modifier\r\n                            .background(Color.Transparent),\r\n                        value = weight,\r\n                        onValueChange = {\r\n                            weight = it\r\n                            if (weight.isNotEmpty()) {\r\n                                weightFloat = weight.toFloat()\r\n                            }\r\n                        },\r\n                        label = {\r\n                            Text(text = \"Weight\")\r\n                        },\r\n                        colors = TextFieldDefaults.textFieldColors(\r\n                            containerColor = Color.Transparent,\r\n                            unfocusedIndicatorColor = Color.Transparent,\r\n                            focusedIndicatorColor = Color.Transparent,\r\n                            focusedTextColor = Color(0xFF181411)\r\n                        ),\r\n                        textStyle = TextStyle(fontSize = 18.sp),\r\n                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number)\r\n                    )\r\n                }\r\n            }\r\n                Column(Modifier.fillMaxWidth().padding(start = 4.dp)) {\r\n                    Text(\r\n                        text = \"Height\",\r\n                        fontWeight = FontWeight.W500,\r\n                        modifier = Modifier,\r\n                        fontSize = 16.sp\r\n                    )\r\n                    Row(\r\n                        modifier = Modifier\r\n                            .padding(top = 12.dp)\r\n                .background(Color(0xFFB2EBF2).copy(alpha = 0.3f), shape = RoundedCornerShape(12.dp)),\r\n                        verticalAlignment = Alignment.CenterVertically\r\n                    ) {\r\n                        OutlinedTextField(\r\n                            modifier = Modifier\r\n                                .background(Color.Transparent),\r\n                            value = height,\r\n                            onValueChange = {\r\n                                height = it\r\n                                if (height.isNotEmpty()) {\r\n                                    heightFloat = height.toFloat()\r\n                                }\r\n                            },\r\n                            label = {\r\n                                Text(text = \"Height\")\r\n                            },\r\n                            colors = TextFieldDefaults.textFieldColors(\r\n                                containerColor = Color.Transparent,\r\n                                unfocusedIndicatorColor = Color.Transparent,\r\n                                focusedIndicatorColor = Color.Transparent,\r\n                                focusedTextColor = Color(0xFF181411)\r\n                            ),\r\n                            textStyle = TextStyle(fontSize = 18.sp),\r\n                            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number)\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n\r\n            Spacer(Modifier.height(8.dp))\r\n\r\n            Text(\r\n                text = \"Gender\",\r\n                fontWeight = FontWeight.W500,\r\n                modifier = Modifier.align(Alignment.Start),\r\n                fontSize = 16.sp\r\n            )\r\n           Row(modifier = rowModifier,\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                OutlinedTextField(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .background(Color.Transparent),\r\n                    value = gender,\r\n                    onValueChange = { gender = it },\r\n                    label = {\r\n                        Text(text = \"Gender\")\r\n                    },\r\n                   colors = outlinedFieldColors,\r\n\r\n                    textStyle = TextStyle(fontSize = 18.sp),\r\n                )\r\n            }\r\n            Spacer(Modifier.height(8.dp))\r\n\r\n            Text(\r\n                text = \"Health Condition\",\r\n                fontWeight = FontWeight.W500,\r\n                modifier = Modifier.align(Alignment.Start),\r\n                fontSize = 16.sp\r\n            )\r\n           Row(modifier = rowModifier,\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                OutlinedTextField(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .background(Color.Transparent),\r\n                    value = healthCondition,\r\n                    onValueChange = { healthCondition = it },\r\n                    label = {\r\n                        Text(text = \"Health Condition\")\r\n                    },\r\n                   colors = outlinedFieldColors,\r\n\r\n                    textStyle = TextStyle(fontSize = 18.sp),\r\n                )\r\n            }\r\n            Spacer(Modifier.height(8.dp))\r\n\r\n            Text(\r\n                text = \"Emergency Phone Number\",\r\n                fontWeight = FontWeight.W500,\r\n                modifier = Modifier.align(Alignment.Start),\r\n                fontSize = 16.sp\r\n            )\r\n           Row(modifier = rowModifier,\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                OutlinedTextField(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth().background(Color.Transparent),\r\n                    value = emergencyPhoneNumber,\r\n                    onValueChange = {\r\n                        emergencyPhoneNumber = it\r\n                        if (emergencyPhoneNumber.isNotEmpty()) {\r\n                            emergencyPhoneNumberLong = emergencyPhoneNumber.toLong()\r\n                        }\r\n                    },\r\n                    label = { Text(\"Emergency Phone Number\") },\r\n                    isError = errorMessage.isNotEmpty(),\r\n                   colors = outlinedFieldColors,\r\n\r\n                    textStyle = TextStyle(fontSize = 18.sp),\r\n                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number)\r\n                )\r\n\r\n            }\r\n            Spacer(Modifier.height(8.dp))\r\n\r\n            Text(\r\n                text = \"Address\",\r\n                fontWeight = FontWeight.W500,\r\n                modifier = Modifier.align(Alignment.Start),\r\n                fontSize = 16.sp\r\n            )\r\n           Row(modifier = rowModifier,\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                OutlinedTextField(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth().background(Color.Transparent),\r\n                    value = address,\r\n                    onValueChange = { address = it },\r\n                    label = {\r\n                        Text(text = \"Address\")\r\n                    },\r\n                   colors = outlinedFieldColors,\r\n\r\n                    textStyle = TextStyle(fontSize = 18.sp),\r\n                )\r\n            }\r\n            Spacer(Modifier.height(8.dp))\r\n\r\n            Text(\r\n                text = \"Allergies\",\r\n                fontWeight = FontWeight.W500,\r\n                modifier = Modifier.align(Alignment.Start),\r\n                fontSize = 16.sp\r\n            )\r\n           Row(modifier = rowModifier,\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                OutlinedTextField(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth().background(Color.Transparent),\r\n                    value = allergies,\r\n                    onValueChange = { allergies = it },\r\n                    label = {\r\n                        Text(text = \"Allergies\")\r\n                    },\r\n                   colors = outlinedFieldColors,\r\n\r\n                    textStyle = TextStyle(fontSize = 18.sp),\r\n                )\r\n            }\r\n            Spacer(Modifier.height(8.dp))\r\n\r\n            Text(\r\n                text = \"Medications\",\r\n                fontWeight = FontWeight.W500,\r\n                modifier = Modifier.align(Alignment.Start),\r\n                fontSize = 16.sp\r\n            )\r\n           Row(modifier = rowModifier,\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                OutlinedTextField(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .background(Color.Transparent),\r\n                    value = medications,\r\n                    onValueChange = { medications = it },\r\n                    label = {\r\n                        Text(text = \"Medications\")\r\n                    },\r\n                   colors = outlinedFieldColors,\r\n\r\n                    textStyle = TextStyle(fontSize = 18.sp),\r\n                )\r\n            }\r\n\r\n            ExtendedFloatingActionButton(\r\n                modifier = Modifier\r\n                    .padding(top = 24.dp, bottom = 16.dp)\r\n                    .background(brush = gradient, shape = RoundedCornerShape(8.dp)),\r\n                onClick = {\r\n                    val userHealthData = UserHealthData(\r\n                        medicalID = medicalID,\r\n                        name = name,\r\n                        bloodGroup = bloodGroup,\r\n                        age = ageInt,\r\n                        systolicBP = systolicBPInt,\r\n                        diastolicBP = diastolicBPInt,\r\n                        bloodSugarLevel = bloodSugarLevel.toInt(),\r\n                        gender = gender,\r\n                        healthCondition = healthCondition,\r\n                        emergencyPhoneNumber = emergencyPhoneNumberLong.toString(),\r\n                        address = address,\r\n                        allergies = allergies,\r\n                        medications = medications,\r\n                        weight = weightFloat,\r\n                        height = heightFloat\r\n                    )\r\n                    healthViewModel.saveHealthData(\r\n                        userHealthData = userHealthData,\r\n                        context = context\r\n                    )\r\n                }) {\r\n                Text(text = \"Save Health Data\", color = Color.White)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nfun HealthInfoPreview(){\r\n    HealthInfo(navController = rememberNavController(), healthViewModel = HealthViewModel())\r\n}\r\n\r\n@Composable\r\nfun AnimatedPreloaderDoctor(modifier: Modifier = Modifier) {\r\n    val preloaderLottieComposition by rememberLottieComposition(\r\n        LottieCompositionSpec.RawRes(\r\n            R.raw.lottieanimationdoctor\r\n        )\r\n    )\r\n\r\n    val preloaderProgress by animateLottieCompositionAsState(\r\n        preloaderLottieComposition,\r\n        iterations = LottieConstants.IterateForever,\r\n        isPlaying = true\r\n    )\r\n\r\n\r\n    LottieAnimation(\r\n        composition = preloaderLottieComposition,\r\n        progress = preloaderProgress,\r\n        modifier = modifier\r\n    )\r\n}\r\n\r\n@Composable\r\nfun AnimatedPreloaderMainHealthActivity(modifier: Modifier = Modifier) {\r\n    val preloaderLottieComposition by rememberLottieComposition(\r\n        LottieCompositionSpec.RawRes(\r\n            R.raw.healthactivityanimation\r\n        )\r\n    )\r\n\r\n    val preloaderProgress by animateLottieCompositionAsState(\r\n        preloaderLottieComposition,\r\n        iterations = LottieConstants.IterateForever,\r\n        isPlaying = true\r\n    )\r\n\r\n\r\n    LottieAnimation(\r\n        composition = preloaderLottieComposition,\r\n        progress = preloaderProgress,\r\n        modifier = modifier\r\n    )\r\n}\r\n\r\n//LottieAnimationsTheme {\r\n//    // A surface container using the 'background' color from the theme\r\n//    Surface(\r\n//        modifier = Modifier.fillMaxSize(),\r\n//        color = MaterialTheme.colorScheme.background\r\n//    ) {\r\n//        Box {\r\n//            AnimatedPreloader(modifier = Modifier.size(200.dp).align(Alignment.Center))\r\n//        }\r\n//    }\r\n//}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/myhealthpassport/Composables/HealthInfo.kt b/app/src/main/java/com/example/myhealthpassport/Composables/HealthInfo.kt
--- a/app/src/main/java/com/example/myhealthpassport/Composables/HealthInfo.kt	(revision 3b31d7d4d68eec37bca96d6b82e67a49df764548)
+++ b/app/src/main/java/com/example/myhealthpassport/Composables/HealthInfo.kt	(date 1741600402540)
@@ -159,9 +159,12 @@
 ////                }
 //            }
 
+            Spacer(Modifier.height(8.dp))
+
             Text(
                 text = "Medical ID",
                 fontWeight = FontWeight.W500,
+                color = Color.Black,
                 modifier = Modifier.align(Alignment.Start),
                 fontSize = 16.sp
             )
@@ -175,7 +178,7 @@
                     value = medicalID,
                     onValueChange = { medicalID = it },
                     label = {
-                        Text(text = "Medical ID")
+                        Text(text = "Medical ID", color = Color.Gray)
                     },
                    colors = outlinedFieldColors,
 
@@ -188,6 +191,7 @@
             Text(
                 text = "Name",
                 fontWeight = FontWeight.W500,
+                color = Color.Black,
                 modifier = Modifier.align(Alignment.Start),
                 fontSize = 16.sp
             )
@@ -201,7 +205,8 @@
                     value = name,
                     onValueChange = { name = it },
                     label = {
-                        Text(text = "Name")
+                        Text(text = "Name",
+                            color = Color.Gray)
                     },
                    colors = outlinedFieldColors,
 
@@ -214,6 +219,7 @@
             Text(
                 text = "Blood Group",
                 fontWeight = FontWeight.W500,
+                color = Color.Black,
                 modifier = Modifier.align(Alignment.Start),
                 fontSize = 16.sp
             )
@@ -227,7 +233,8 @@
                     value = bloodGroup,
                     onValueChange = { bloodGroup = it },
                     label = {
-                        Text(text = "Blood Group")
+                        Text(text = "Blood Group",
+                            color = Color.Gray)
                     },
                    colors = outlinedFieldColors,
 
@@ -240,6 +247,7 @@
             Text(
                 text = "Age",
                 fontWeight = FontWeight.W500,
+                color = Color.Black,
                 modifier = Modifier.align(Alignment.Start),
                 fontSize = 16.sp
             )
@@ -258,7 +266,7 @@
                         }
                     },
                     label = {
-                        Text(text = "Age")
+                        Text(text = "Age", color = Color.Gray)
                     },
                    colors = outlinedFieldColors,
 
@@ -277,6 +285,7 @@
                     Text(
                         text = "Systolic BP",
                         fontWeight = FontWeight.W500,
+                        color = Color.Black,
                         fontSize = 16.sp
                     )
                     Row(
@@ -296,7 +305,7 @@
                                     systolicBPInt = systolicBP.toInt()
                                 }
                             },
-                            label = { Text("Systolic (mmHg)") },
+                            label = { Text("Systolic (mmHg)", color = Color.Gray) },
                             isError = errorMessage.isNotEmpty(),
                             colors = TextFieldDefaults.textFieldColors(
                                 containerColor = Color.Transparent,
@@ -319,6 +328,7 @@
                     Text(
                         text = "Diastolic BP",
                         fontWeight = FontWeight.W500,
+                        color = Color.Black,
                         fontSize = 16.sp
                     )
                     Row(
@@ -338,7 +348,7 @@
                                     diastolicBPInt = diastolicBP.toInt()
                                 }
                             },
-                            label = { Text("Diastolic (mmHg)") },
+                            label = { Text("Diastolic (mmHg)", color = Color.Gray) },
                             isError = errorMessage.isNotEmpty(),
                             colors = TextFieldDefaults.textFieldColors(
                                 containerColor = Color.Transparent,
@@ -364,6 +374,7 @@
             Text(
                 text = "Blood Sugar",
                 fontWeight = FontWeight.W500,
+                color = Color.Black,
                 modifier = Modifier.align(Alignment.Start),
                 fontSize = 16.sp
             )
@@ -382,7 +393,7 @@
                         }
                     },
                     label = {
-                        Text(text = "Blood Sugar")
+                        Text(text = "Blood Sugar", color = Color.Gray)
                     },
                    colors = outlinedFieldColors,
 
@@ -397,6 +408,7 @@
                 Text(
                     text = "Weight",
                     fontWeight = FontWeight.W500,
+                    color = Color.Black,
                     modifier = Modifier,
                     fontSize = 16.sp
                 )
@@ -417,7 +429,7 @@
                             }
                         },
                         label = {
-                            Text(text = "Weight")
+                            Text(text = "Weight", color = Color.Gray)
                         },
                         colors = TextFieldDefaults.textFieldColors(
                             containerColor = Color.Transparent,
@@ -434,6 +446,7 @@
                     Text(
                         text = "Height",
                         fontWeight = FontWeight.W500,
+                        color = Color.Black,
                         modifier = Modifier,
                         fontSize = 16.sp
                     )
@@ -454,7 +467,7 @@
                                 }
                             },
                             label = {
-                                Text(text = "Height")
+                                Text(text = "Height", color = Color.Gray)
                             },
                             colors = TextFieldDefaults.textFieldColors(
                                 containerColor = Color.Transparent,
@@ -474,6 +487,7 @@
             Text(
                 text = "Gender",
                 fontWeight = FontWeight.W500,
+                color = Color.Black,
                 modifier = Modifier.align(Alignment.Start),
                 fontSize = 16.sp
             )
@@ -487,7 +501,7 @@
                     value = gender,
                     onValueChange = { gender = it },
                     label = {
-                        Text(text = "Gender")
+                        Text(text = "Gender", color = Color.Gray)
                     },
                    colors = outlinedFieldColors,
 
@@ -499,6 +513,7 @@
             Text(
                 text = "Health Condition",
                 fontWeight = FontWeight.W500,
+                color = Color.Black,
                 modifier = Modifier.align(Alignment.Start),
                 fontSize = 16.sp
             )
@@ -512,7 +527,7 @@
                     value = healthCondition,
                     onValueChange = { healthCondition = it },
                     label = {
-                        Text(text = "Health Condition")
+                        Text(text = "Health Condition", color = Color.Gray)
                     },
                    colors = outlinedFieldColors,
 
@@ -524,6 +539,7 @@
             Text(
                 text = "Emergency Phone Number",
                 fontWeight = FontWeight.W500,
+                color = Color.Black,
                 modifier = Modifier.align(Alignment.Start),
                 fontSize = 16.sp
             )
@@ -540,7 +556,7 @@
                             emergencyPhoneNumberLong = emergencyPhoneNumber.toLong()
                         }
                     },
-                    label = { Text("Emergency Phone Number") },
+                    label = { Text("Emergency Phone Number", color = Color.Gray) },
                     isError = errorMessage.isNotEmpty(),
                    colors = outlinedFieldColors,
 
@@ -554,6 +570,7 @@
             Text(
                 text = "Address",
                 fontWeight = FontWeight.W500,
+                color = Color.Black,
                 modifier = Modifier.align(Alignment.Start),
                 fontSize = 16.sp
             )
@@ -566,7 +583,7 @@
                     value = address,
                     onValueChange = { address = it },
                     label = {
-                        Text(text = "Address")
+                        Text(text = "Address", color = Color.Gray)
                     },
                    colors = outlinedFieldColors,
 
@@ -578,6 +595,7 @@
             Text(
                 text = "Allergies",
                 fontWeight = FontWeight.W500,
+                color = Color.Black,
                 modifier = Modifier.align(Alignment.Start),
                 fontSize = 16.sp
             )
@@ -590,7 +608,7 @@
                     value = allergies,
                     onValueChange = { allergies = it },
                     label = {
-                        Text(text = "Allergies")
+                        Text(text = "Allergies", color = Color.Gray)
                     },
                    colors = outlinedFieldColors,
 
@@ -602,6 +620,7 @@
             Text(
                 text = "Medications",
                 fontWeight = FontWeight.W500,
+                color = Color.Black,
                 modifier = Modifier.align(Alignment.Start),
                 fontSize = 16.sp
             )
@@ -615,7 +634,7 @@
                     value = medications,
                     onValueChange = { medications = it },
                     label = {
-                        Text(text = "Medications")
+                        Text(text = "Medications", color = Color.Gray)
                     },
                    colors = outlinedFieldColors,
 
@@ -627,6 +646,7 @@
                 modifier = Modifier
                     .padding(top = 24.dp, bottom = 16.dp)
                     .background(brush = gradient, shape = RoundedCornerShape(8.dp)),
+                containerColor = Color(0xFFE9EFF9),
                 onClick = {
                     val userHealthData = UserHealthData(
                         medicalID = medicalID,
@@ -650,7 +670,7 @@
                         context = context
                     )
                 }) {
-                Text(text = "Save Health Data", color = Color.White)
+                Text(text = "Save Health Data", color = Color.Black)
             }
         }
     }
Index: app/src/main/java/com/example/myhealthpassport/Composables/MainHealthActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.myhealthpassport.Composables\r\n\r\nimport AgentScreen\r\nimport com.example.myhealthpassport.ViewModels.AgentViewModel\r\nimport android.content.Intent\r\nimport android.net.Uri\r\nimport androidx.compose.animation.AnimatedVisibility\r\nimport androidx.compose.animation.fadeIn\r\nimport androidx.compose.animation.fadeOut\r\nimport androidx.compose.animation.slideInHorizontally\r\nimport androidx.compose.animation.slideOutHorizontally\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.paddingFromBaseline\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.AccountCircle\r\nimport androidx.compose.material.icons.filled.AddCircle\r\nimport androidx.compose.material.icons.filled.Build\r\nimport androidx.compose.material.icons.filled.ExitToApp\r\nimport androidx.compose.material.icons.filled.Home\r\nimport androidx.compose.material.icons.filled.Info\r\nimport androidx.compose.material.icons.filled.Lock\r\nimport androidx.compose.material.icons.filled.Search\r\nimport androidx.compose.material.icons.filled.Send\r\nimport androidx.compose.material.icons.filled.Star\r\nimport androidx.compose.material.icons.rounded.Menu\r\nimport androidx.compose.material3.Divider\r\nimport androidx.compose.material3.DrawerValue\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.ExtendedFloatingActionButton\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.IconButtonColors\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.ModalDrawerSheet\r\nimport androidx.compose.material3.ModalNavigationDrawer\r\nimport androidx.compose.material3.NavigationBar\r\nimport androidx.compose.material3.NavigationBarItem\r\nimport androidx.compose.material3.NavigationDrawerItem\r\nimport androidx.compose.material3.NavigationDrawerItemDefaults\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TextButton\r\nimport androidx.compose.material3.TopAppBar\r\nimport androidx.compose.material3.TopAppBarDefaults\r\nimport androidx.compose.material3.rememberDrawerState\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.rememberCoroutineScope\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.graphics.Brush\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.graphics.vector.ImageVector\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.text.style.TextDecoration\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.navigation.NavController\r\nimport androidx.navigation.compose.NavHost\r\nimport androidx.navigation.compose.composable\r\nimport androidx.navigation.compose.currentBackStackEntryAsState\r\nimport androidx.navigation.compose.rememberNavController\r\nimport com.example.myhealthpassport.FlipAnimation\r\nimport com.example.myhealthpassport.Navigation.Screen\r\nimport com.example.myhealthpassport.R\r\nimport com.example.myhealthpassport.ViewModels.HealthViewModel\r\nimport com.example.myhealthpassport.aicompanion.ChatPage\r\nimport com.example.myhealthpassport.aicompanion.ChatViewModel\r\nimport com.example.myhealthpassport.graph.ChartScreen\r\nimport com.google.firebase.Firebase\r\nimport com.google.firebase.auth.auth\r\nimport kotlinx.coroutines.launch\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun NavigationDrawer(navController: NavController) {\r\n    val navController = rememberNavController()\r\n    val coroutineScope = rememberCoroutineScope()\r\n    val drawerState = rememberDrawerState(initialValue = DrawerValue.Closed)\r\n//    val selectedIcon = remember { mutableStateOf(Icons.Default.Home) }\r\n    val currentRoute = navController.currentBackStackEntryAsState().value?.destination?.route\r\n\r\n    val drawerBackgroundColor = Color(0xFFE3F2FD) // Light grayish-blue\r\n    val selectedItemColor = Color(0xFF90CAF9) // Muted blue\r\n    val unselectedItemColor = Color.White\r\n    val textPrimaryColor = Color(0xFF1A237E) // Dark navy blue\r\n    val textUnselectedColor = Color.Black\r\n    val iconSelectedColor = Color(0xFF0D47A1) // Deep blue\r\n    val iconUnselectedColor = Color(0xFF37474F) // Dark gray\r\n\r\n    val gradient = Brush.horizontalGradient(\r\n        colors = listOf(Color(0xFF00897B), Color(0xFF1E88E5))\r\n    )\r\n\r\n    val context = LocalContext.current\r\n\r\n    ModalNavigationDrawer(\r\n        drawerState = drawerState,\r\n        gesturesEnabled = true,\r\n        drawerContent = {\r\n            AnimatedVisibility(\r\n                visible = drawerState.isOpen,\r\n                enter = fadeIn() + slideInHorizontally(initialOffsetX = { -it }),\r\n                exit = fadeOut() + slideOutHorizontally(targetOffsetX = { -it })\r\n            ) {\r\n            ModalDrawerSheet(modifier = Modifier.fillMaxWidth(0.8f)) {\r\n                Box(\r\n                    modifier = Modifier\r\n                        .background(gradient)\r\n                        .fillMaxWidth()\r\n                        .height(120.dp)\r\n                ) {\r\n                    Row(\r\n                        modifier = Modifier\r\n                            .align(Alignment.CenterStart)\r\n                            .padding(vertical = 8.dp)\r\n                            .padding(start = 4.dp),\r\n                        horizontalArrangement = Arrangement.Start,\r\n                    ) {\r\n                        Image(\r\n                            painter = painterResource(R.drawable.medicalcheck),\r\n                            contentDescription = \"logo\",\r\n                            modifier = Modifier.clip(shape = RoundedCornerShape(88.dp))\r\n                                .size(80.dp)\r\n                        )\r\n                        Text(\r\n                            text = \"MyHealthPassport\",\r\n                            color = Color.White,\r\n                            textAlign = TextAlign.Center,\r\n                            fontSize = 20.sp,\r\n                            modifier = Modifier.align(Alignment.CenterVertically)\r\n                                .padding(8.dp)\r\n                        )\r\n                    }\r\n                }\r\n\r\n                Column(modifier = Modifier.background(color = Color.White)) {\r\n\r\n                    NavigationDrawerItem(\r\n                        label = { Text(text = \"Home\", color = if (currentRoute == Screen.FlipAnimation.route) iconSelectedColor else iconUnselectedColor) },\r\n                        selected = currentRoute == Screen.FlipAnimation.route,\r\n                        icon = {\r\n                            Icon(\r\n                                imageVector = Icons.Default.Home,\r\n                                contentDescription = \"home\",\r\n                                tint = if (currentRoute == Screen.FlipAnimation.route) iconSelectedColor else iconUnselectedColor\r\n                            )\r\n                        },\r\n                        onClick = {\r\n                            coroutineScope.launch { drawerState.close() }\r\n                            navController.navigate(Screen.FlipAnimation.route) {\r\n                                popUpTo(Screen.FlipAnimation.route) { inclusive = false }\r\n                            }\r\n                        },\r\n                        colors = NavigationDrawerItemDefaults.colors(\r\n                            selectedContainerColor = selectedItemColor,\r\n                            unselectedContainerColor = unselectedItemColor,\r\n                            unselectedTextColor = textPrimaryColor,\r\n                            selectedTextColor = textPrimaryColor,\r\n                            selectedIconColor = iconSelectedColor,\r\n                            unselectedIconColor = iconUnselectedColor\r\n                        ),\r\n                        modifier = Modifier.background(color = Color.White)\r\n                    )\r\n\r\n                    NavigationDrawerItem(\r\n                        label = { Text(text = \"Agent\", color = if (currentRoute == Screen.AgentScreen.route) iconSelectedColor else iconUnselectedColor) },\r\n                        selected = currentRoute == Screen.AgentScreen.route,\r\n                        icon = {\r\n                            Icon(\r\n                                imageVector = Icons.Default.Build,\r\n                                contentDescription = \"agent\",\r\n                                tint = if (currentRoute == Screen.AgentScreen.route) iconSelectedColor else iconUnselectedColor\r\n                            )\r\n                        },\r\n                        onClick = {\r\n                            coroutineScope.launch { drawerState.close() }\r\n                            navController.navigate(Screen.AgentScreen.route) {\r\n                                popUpTo(Screen.FlipAnimation.route) { inclusive = false }\r\n                            }\r\n                        },\r\n                        colors = NavigationDrawerItemDefaults.colors(\r\n                            selectedContainerColor = selectedItemColor,\r\n                            unselectedContainerColor = unselectedItemColor,\r\n                            unselectedTextColor = textPrimaryColor,\r\n                            selectedTextColor = textPrimaryColor,\r\n                            selectedIconColor = iconSelectedColor,\r\n                            unselectedIconColor = iconUnselectedColor\r\n                        ),\r\n                        modifier = Modifier.background(color = Color.White)\r\n                    )\r\n\r\n                    NavigationDrawerItem(\r\n                        label = { Text(text = \"Emergency Contacts\", color = if (currentRoute == Screen.EmergencyContacts.route) iconSelectedColor else iconUnselectedColor) },\r\n                        selected = currentRoute == Screen.EmergencyContacts.route,\r\n                        icon = {\r\n                            Icon(\r\n                                imageVector = Icons.Default.AccountCircle,\r\n                                contentDescription = \"emergency contacts\",\r\n                                tint = if (currentRoute == Screen.EmergencyContacts.route) iconSelectedColor else iconUnselectedColor\r\n                            )\r\n                        },\r\n                        onClick = {\r\n                            coroutineScope.launch { drawerState.close() }\r\n                            navController.navigate(Screen.EmergencyContacts.route) {\r\n                                popUpTo(Screen.FlipAnimation.route) { inclusive = false }\r\n                            }\r\n                        },\r\n                        colors = NavigationDrawerItemDefaults.colors(\r\n                            selectedContainerColor = selectedItemColor,\r\n                            unselectedContainerColor = unselectedItemColor,\r\n                            unselectedTextColor = textPrimaryColor,\r\n                            selectedTextColor = textPrimaryColor,\r\n                            selectedIconColor = iconSelectedColor,\r\n                            unselectedIconColor = iconUnselectedColor\r\n                        ),\r\n                        modifier = Modifier.background(color = Color.White)\r\n                    )\r\n\r\n                    NavigationDrawerItem(\r\n                        label = { Text(text = \"Health info\", color = if (currentRoute == Screen.HealthInfo.route) iconSelectedColor else iconUnselectedColor) },\r\n                        selected = currentRoute == Screen.HealthInfo.route,\r\n                        icon = {\r\n                            Icon(\r\n                                imageVector = Icons.Default.Info,\r\n                                contentDescription = \"health info\",\r\n                                tint = if (currentRoute == Screen.HealthInfo.route) iconSelectedColor else iconUnselectedColor\r\n                            )\r\n                        },\r\n                        onClick = {\r\n                            coroutineScope.launch { drawerState.close() }\r\n                            navController.navigate(Screen.HealthInfo.route) {\r\n                                popUpTo(Screen.FlipAnimation.route) { inclusive = false }\r\n                            }\r\n                        },\r\n                        colors = NavigationDrawerItemDefaults.colors(\r\n                            selectedContainerColor = selectedItemColor,\r\n                            unselectedContainerColor = unselectedItemColor,\r\n                            unselectedTextColor = textPrimaryColor,\r\n                            selectedTextColor = textPrimaryColor,\r\n                            selectedIconColor = iconSelectedColor,\r\n                            unselectedIconColor = iconUnselectedColor\r\n                        ),\r\n                        modifier = Modifier.background(color = Color.White)\r\n                    )\r\n\r\n                    NavigationDrawerItem(\r\n                        label = { Text(text = \"Get Health info\", color = if (currentRoute == Screen.GetHealthInfo.route) iconSelectedColor else iconUnselectedColor) },\r\n                        selected = currentRoute == Screen.GetHealthInfo.route,\r\n                        icon = {\r\n                            Icon(\r\n                                imageVector = Icons.Default.Search,\r\n                                contentDescription = \"get health info\",\r\n                                tint = if (currentRoute == Screen.GetHealthInfo.route) iconSelectedColor else iconUnselectedColor\r\n                            )\r\n                        },\r\n                        onClick = {\r\n                            coroutineScope.launch { drawerState.close() }\r\n                            navController.navigate(Screen.GetHealthInfo.route) {\r\n                                popUpTo(Screen.FlipAnimation.route) { inclusive = false }\r\n                            }\r\n                        },\r\n                        colors = NavigationDrawerItemDefaults.colors(\r\n                            selectedContainerColor = selectedItemColor,\r\n                            unselectedContainerColor = unselectedItemColor,\r\n                            unselectedTextColor = textPrimaryColor,\r\n                            selectedTextColor = textPrimaryColor,\r\n                            selectedIconColor = iconSelectedColor,\r\n                            unselectedIconColor = iconUnselectedColor\r\n                        ),\r\n                        modifier = Modifier.background(color = Color.White)\r\n                    )\r\n\r\n                    NavigationDrawerItem(\r\n                        label = { Text(text = \"AI Symptom Checker\", color = if (currentRoute == Screen.ChatPage.route) iconSelectedColor else iconUnselectedColor) },\r\n                        selected = currentRoute == Screen.ChatPage.route,\r\n                        icon = {\r\n                            Icon(\r\n                                imageVector = Icons.Default.AddCircle,\r\n                                contentDescription = \"personal therapist\",\r\n                                tint = if (currentRoute == Screen.ChatPage.route) iconSelectedColor else iconUnselectedColor\r\n                            )\r\n                        },\r\n                        onClick = {\r\n                            coroutineScope.launch { drawerState.close() }\r\n                            navController.navigate(Screen.ChatPage.route) {\r\n                                popUpTo(Screen.FlipAnimation.route) { inclusive = false }\r\n                            }\r\n                        },\r\n                        colors = NavigationDrawerItemDefaults.colors(\r\n                            selectedContainerColor = selectedItemColor,\r\n                            unselectedContainerColor = unselectedItemColor,\r\n                            unselectedTextColor = textPrimaryColor,\r\n                            selectedTextColor = textPrimaryColor,\r\n                            selectedIconColor = iconSelectedColor,\r\n                            unselectedIconColor = iconUnselectedColor\r\n                        ),\r\n                        modifier = Modifier.background(color = Color.White)\r\n                    )\r\n\r\n                    NavigationDrawerItem(\r\n                        label = {\r\n                            Text(\r\n                                text = \"Medical Report Analyser\",\r\n                                color = if (currentRoute == Screen.HealthAiScreen.route) iconSelectedColor else iconUnselectedColor\r\n                            )\r\n                        },\r\n                        selected = currentRoute == Screen.HealthAiScreen.route,\r\n                        icon = {\r\n                            Icon(\r\n                                imageVector = Icons.Default.Star,\r\n                                contentDescription = \"medical report analyser\",\r\n                                tint = if (currentRoute == Screen.HealthAiScreen.route) iconSelectedColor else iconUnselectedColor\r\n                            )\r\n                        },\r\n                        onClick = {\r\n                            coroutineScope.launch { drawerState.close() }\r\n                            navController.navigate(Screen.HealthAiScreen.route) {\r\n                                popUpTo(Screen.FlipAnimation.route) { inclusive = false }\r\n                            }\r\n                        },\r\n                        colors = NavigationDrawerItemDefaults.colors(\r\n                            selectedContainerColor = selectedItemColor,\r\n                            unselectedContainerColor = unselectedItemColor,\r\n                            unselectedTextColor = textPrimaryColor,\r\n                            selectedTextColor = textPrimaryColor,\r\n                            selectedIconColor = iconSelectedColor,\r\n                            unselectedIconColor = iconUnselectedColor\r\n                        ),\r\n                        modifier = Modifier.background(color = Color.White)\r\n                    )\r\n\r\n                    Spacer(modifier = Modifier.background(color = Color.White).weight(0.4f))\r\n\r\n                    NavigationDrawerItem(\r\n                        label = { Text(text = \"Exit and Sign Out\", color = Color.Black) },\r\n                        selected = false,\r\n                        icon = {\r\n                            Icon(\r\n                                imageVector = Icons.Default.ExitToApp,\r\n                                contentDescription = \"exit and sign out\",\r\n                            )\r\n                        },\r\n                        onClick = {\r\n                            coroutineScope.launch { drawerState.close() }\r\n                            Firebase.auth.signOut()\r\n                            navController.navigate(Screen.Login.route) {\r\n                                popUpTo(Screen.FlipAnimation.route) { inclusive = false }\r\n                            }\r\n                        },\r\n                        colors = NavigationDrawerItemDefaults.colors(\r\n                            selectedContainerColor = selectedItemColor,\r\n                            unselectedContainerColor = unselectedItemColor,\r\n                            unselectedTextColor = textPrimaryColor,\r\n                            selectedTextColor = textPrimaryColor,\r\n                            selectedIconColor = iconSelectedColor,\r\n                            unselectedIconColor = iconUnselectedColor\r\n                        ),\r\n                        modifier = Modifier.background(color = Color.White)\r\n                    )\r\n\r\n                    Row(\r\n                        modifier = Modifier.background(color = Color.White).fillMaxWidth(),\r\n                        verticalAlignment = Alignment.CenterVertically\r\n                    ) {\r\n                        TextButton(\r\n                            onClick = {\r\n                                val intent = Intent(\r\n                                    Intent.ACTION_VIEW,\r\n                                    Uri.parse(\"https://www.instagram.com/myhealthpassport?igsh=YzljYTk1ODg3Zg==\")\r\n                                )\r\n                                context.startActivity(intent)\r\n                            },\r\n                            modifier = Modifier\r\n                                .align(alignment = Alignment.CenterVertically)\r\n                        ) {\r\n                            Text(\r\n                                text = \"Community and Support\",\r\n                                textDecoration = TextDecoration.Underline,\r\n                                fontSize = 16.sp,\r\n                            )\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n//            TextButton(onClick = { val intent = Intent(Intent.ACTION_VIEW, Uri.parse(\"https://www.instagram.com/myhealthpassport?igsh=YzljYTk1ODg3Zg==\"))\r\n//                context.startActivity(intent)\r\n//            }, modifier = Modifier\r\n//                .padding(50.dp)) {\r\n//                Text(text = \"Community and Support\", textDecoration = TextDecoration.Underline)\r\n//            }\r\n        }\r\n    ) {\r\n        Scaffold(\r\n            topBar = {\r\n                Column {\r\n                        TopAppBar(\r\n                            title = { Text(text = \"MyHealthPassport\") },\r\n                            colors = TopAppBarDefaults.topAppBarColors(\r\n                                containerColor = Color.White,\r\n                                titleContentColor = Color.Black,\r\n                                navigationIconContentColor = Color.White\r\n                            ),\r\n                            navigationIcon = {\r\n                                IconButton(\r\n                                    onClick = {\r\n                                        coroutineScope.launch { drawerState.open() }\r\n                                    },\r\n                                    colors = IconButtonColors(\r\n                                        containerColor = Color.Transparent,\r\n                                        contentColor = Color.Black,\r\n                                        disabledContentColor = Color.Black,\r\n                                        disabledContainerColor = Color.Transparent\r\n                                    )\r\n                                ) {\r\n                                    Icon(Icons.Rounded.Menu, contentDescription = \"MenuButton\")\r\n                                }\r\n                            }\r\n                        )\r\n                        Divider(color = Color.LightGray, thickness = 0.6.dp)\r\n                    }\r\n            },\r\n            bottomBar = {\r\n                    BottomNavigationBar(navController)\r\n            },\r\n            modifier = Modifier.fillMaxSize().background(Color.White)\r\n        ) { innerPadding ->\r\n            NavHost(\r\n                navController = navController,\r\n                startDestination = Screen.FlipAnimation.route,\r\n                Modifier.padding(innerPadding)\r\n            ) {\r\n\r\n                    composable(Screen.FlipAnimation.route,\r\n                            enterTransition = { slideInHorizontally(initialOffsetX = { it }) + fadeIn() },\r\n                        exitTransition = { slideOutHorizontally(targetOffsetX = { -it }) + fadeOut() }) {\r\n                        FlipAnimation(navController = navController)\r\n                    }\r\n                    composable(Screen.HealthInfo.route,\r\n                        enterTransition = { slideInHorizontally(initialOffsetX = { it }) + fadeIn() },\r\n                        exitTransition = { slideOutHorizontally(targetOffsetX = { -it }) + fadeOut() }) {\r\n                        HealthInfo(\r\n                            navController = navController,\r\n                            healthViewModel = HealthViewModel()\r\n                        )\r\n                    }\r\n                    composable(Screen.GetHealthInfo.route,\r\n                        enterTransition = { slideInHorizontally(initialOffsetX = { it }) + fadeIn() },\r\n                        exitTransition = { slideOutHorizontally(targetOffsetX = { -it }) + fadeOut() }) {\r\n                        GetHealthInfo(\r\n                            navController = navController,\r\n                            healthViewModel = HealthViewModel()\r\n                        )\r\n                    }\r\n                    composable(Screen.HealthAiScreen.route,\r\n                        enterTransition = { slideInHorizontally(initialOffsetX = { it }) + fadeIn() },\r\n                        exitTransition = { slideOutHorizontally(targetOffsetX = { -it }) + fadeOut() }) {\r\n                        HealthAiScreen(navController = navController)\r\n                    }\r\n                    composable(Screen.EmergencyContacts.route,\r\n                        enterTransition = { slideInHorizontally(initialOffsetX = { it }) + fadeIn() },\r\n                        exitTransition = { slideOutHorizontally(targetOffsetX = { -it }) + fadeOut() }) {\r\n                        EmergencyContactsListPreview(navController = navController)\r\n                    }\r\n                    composable(Screen.ChatPage.route,\r\n                        enterTransition = { slideInHorizontally(initialOffsetX = { it }) + fadeIn() },\r\n                        exitTransition = { slideOutHorizontally(targetOffsetX = { -it }) + fadeOut() }) {\r\n                        ChatPage(\r\n                            navController,\r\n                            context,\r\n                            ChatViewModel(context)\r\n                        )\r\n                    }\r\n                    composable(Screen.AgentScreen.route,\r\n                        enterTransition = { slideInHorizontally(initialOffsetX = { it }) + fadeIn() },\r\n                        exitTransition = { slideOutHorizontally(targetOffsetX = { -it }) + fadeOut() }) {\r\n                        AgentScreen(\r\n                            navController = navController,\r\n                            agentViewModel = AgentViewModel(),\r\n                            healthViewModel = HealthViewModel()\r\n                        )\r\n                    }\r\n                    composable(Screen.ChartScreen.route,\r\n                        enterTransition = { slideInHorizontally(initialOffsetX = { it }) + fadeIn() },\r\n                        exitTransition = { slideOutHorizontally(targetOffsetX = { -it }) + fadeOut() }\r\n                        ) {\r\n                        ChartScreen(navController)\r\n                    }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nfun BottomNavigationBar(navController: NavController) {\r\n    val items = listOf(\r\n        BottomNavItem(\"Home\", Icons.Default.Home, Screen.FlipAnimation.route),\r\n        BottomNavItem(\"Health Info\", Icons.Default.Info, Screen.ChartScreen.route)\r\n    )\r\n    var selectedItem = remember { mutableStateOf(0) }\r\n\r\n    NavigationBar {\r\n        items.forEachIndexed { index, item ->\r\n            NavigationBarItem(\r\n                icon = { Icon(imageVector = item.icon, contentDescription = item.label) },\r\n                label = { Text(text = item.label) },\r\n                selected = selectedItem.value == index,\r\n                onClick = {\r\n                    selectedItem.value = index\r\n                    navController.navigate(item.route) {\r\n                        popUpTo(navController.graph.startDestinationId) {\r\n                            saveState = true\r\n                        }\r\n                        launchSingleTop = true\r\n                        restoreState = true\r\n                    }\r\n                },\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\ndata class BottomNavItem(val label: String, val icon: ImageVector, val route: String)\r\n\r\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nfun NavigationDrawerPreview(){\r\n    NavigationDrawer(navController = rememberNavController())\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/myhealthpassport/Composables/MainHealthActivity.kt b/app/src/main/java/com/example/myhealthpassport/Composables/MainHealthActivity.kt
--- a/app/src/main/java/com/example/myhealthpassport/Composables/MainHealthActivity.kt	(revision 3b31d7d4d68eec37bca96d6b82e67a49df764548)
+++ b/app/src/main/java/com/example/myhealthpassport/Composables/MainHealthActivity.kt	(date 1741286541295)
@@ -47,6 +47,7 @@
 import androidx.compose.material3.ModalNavigationDrawer
 import androidx.compose.material3.NavigationBar
 import androidx.compose.material3.NavigationBarItem
+import androidx.compose.material3.NavigationBarItemColors
 import androidx.compose.material3.NavigationDrawerItem
 import androidx.compose.material3.NavigationDrawerItemDefaults
 import androidx.compose.material3.Scaffold
@@ -98,16 +99,16 @@
 //    val selectedIcon = remember { mutableStateOf(Icons.Default.Home) }
     val currentRoute = navController.currentBackStackEntryAsState().value?.destination?.route
 
-    val drawerBackgroundColor = Color(0xFFE3F2FD) // Light grayish-blue
-    val selectedItemColor = Color(0xFF90CAF9) // Muted blue
+    val drawerBackgroundColor = Color(0xFFE3F2FD)
+    val selectedItemColor = Color(0xFFB2EBF2)
     val unselectedItemColor = Color.White
-    val textPrimaryColor = Color(0xFF1A237E) // Dark navy blue
+    val textPrimaryColor = Color(0xFF1A237E)
     val textUnselectedColor = Color.Black
-    val iconSelectedColor = Color(0xFF0D47A1) // Deep blue
-    val iconUnselectedColor = Color(0xFF37474F) // Dark gray
+    val iconSelectedColor = Color(0xFF0288D1)
+    val iconUnselectedColor = Color(0xFF37474F)
 
     val gradient = Brush.horizontalGradient(
-        colors = listOf(Color(0xFF00897B), Color(0xFF1E88E5))
+        colors = listOf(Color(0xFF00BCD4), Color(0xFF1E88E5))
     )
 
     val context = LocalContext.current
@@ -519,11 +520,18 @@
     )
     var selectedItem = remember { mutableStateOf(0) }
 
-    NavigationBar {
+    NavigationBar(containerColor = Color(0xFFF0F1F2)) {
         items.forEachIndexed { index, item ->
             NavigationBarItem(
-                icon = { Icon(imageVector = item.icon, contentDescription = item.label) },
-                label = { Text(text = item.label) },
+                icon = {
+                    Icon(
+                        imageVector = item.icon,
+                        contentDescription = item.label,
+                        tint = if (selectedItem.value == index) Color(0xFFF0F1F2) else Color.Black
+                        )
+                       },
+                label = { Text(text = item.label,
+                    color = Color.Black) },
                 selected = selectedItem.value == index,
                 onClick = {
                     selectedItem.value = index
Index: .idea/ChatHistory_schema_v2.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/ChatHistory_schema_v2.xml b/.idea/ChatHistory_schema_v2.xml
new file mode 100644
--- /dev/null	(date 1740946578119)
+++ b/.idea/ChatHistory_schema_v2.xml	(date 1740946578119)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ChatHistoryState">
+    <option name="serializedSessions">
+      <map>
+        <entry key="0e3005cf-0519-4e70-9cb7-92a8dee61092" value="{&quot;id&quot;:&quot;0e3005cf-0519-4e70-9cb7-92a8dee61092&quot;,&quot;name&quot;:&quot;Issue with Black Display on Physical Device Chart&quot;,&quot;timestamp&quot;:1740946570228,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;\u003cuser_query\u003e\nthere is some black showing on my physical device in the chart\n\u003c/user_query\u003e&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;I see the issue with black backgrounds showing on your physical device in the chart. This is likely happening because of transparency issues with the chart background colors. Let me help you fix it:\n\n```kotlin:app/src/main/java/com/example/myhealthpassport/graph/ChartScreen.kt\n// ... existing code ...\n/**  Blood Pressure Chart **/\n@Composable\nfun BloodPressureChart(bloodPressureList: List\u003cPair\u003cInt, Int\u003e\u003e) {\n    // ... existing code ...\n\n    val lineChartData \u003d LineChartData(\n        // ... existing code ...\n        xAxisData \u003d AxisData.Builder()\n            .axisStepSize(60.dp)\n            .axisLabelColor(Color.Black)\n            .steps(pointsSystolic.size - 1)\n            .labelData { i -\u003e \&quot;${i + 1}\&quot; }\n            .labelAndAxisLinePadding(15.dp)\n            .backgroundColor(Color.White)  // Make sure this is explicit\n            .build(),\n        yAxisData \u003d AxisData.Builder()\n            .steps(4)\n            .axisLabelColor(Color.Black)\n            .labelData { i -\u003e \&quot;${(minBP + (i * stepSize)).toInt()} mmHg\&quot; }\n            .labelAndAxisLinePadding(16.dp)\n            .backgroundColor(Color.White)  // Make sure this is explicit\n            .build(),\n        gridLines \u003d GridLines(),\n        backgroundColor \u003d Color.White  // Make sure this is explicit\n    )\n\n    AnimatedVisibility(visible \u003d isVisible.value) {\n        LineChart(\n            modifier \u003d Modifier\n                .fillMaxWidth()\n                .height(320.dp)\n                .background(Color.White)  // This is important\n                // ... existing code ...\n        )\n    }\n}\n\n/**  Blood Sugar Chart **/\n@Composable\nfun BloodSugarChart(bloodSugarLevelList: List\u003cInt\u003e) {\n    // ... existing code ...\n\n    val lineChartData \u003d LineChartData(\n        linePlotData \u003d LinePlotData(lines \u003d listOf(Line(points, LineStyle(color \u003d Color(0xFF388E3C))))),\n        xAxisData \u003d AxisData.Builder()\n            .steps(points.size - 1)\n            .axisStepSize(60.dp)\n            .labelData { i -\u003e \&quot;${i + 1}\&quot; }\n            .labelAndAxisLinePadding(15.dp)\n            .axisLabelColor(Color.Black)\n            .backgroundColor(Color.White)  // Changed from Transparent to White\n            .build(),\n        yAxisData \u003d AxisData.Builder()\n            .steps(uniqueBloodSugarValues.size - 1)\n            .axisLabelColor(Color.Black)\n            .backgroundColor(Color.White)  // Changed from Transparent to White\n            .labelAndAxisLinePadding(16.dp)\n            .labelData { i -\u003e \&quot;${uniqueBloodSugarValues[i]} mg/dL\&quot; }\n            .build(),\n        backgroundColor \u003d Color.White  // Changed from Transparent to White\n    )\n\n    AnimatedVisibility(visible \u003d isVisible.value) {\n        LineChart(\n            modifier \u003d Modifier\n                .fillMaxWidth()\n                .height(250.dp)\n                .background(Color.White)  // Add this background modifier\n                .graphicsLayer(alpha \u003d if (isVisible.value) 1f else 0f),\n            lineChartData \u003d lineChartData\n        )\n    }\n}\n\n/**  Medication Pie Chart **/\n@Composable\nfun MedicationPieChart(medications: Map\u003cString, Int\u003e) {\n    // ... existing code ...\n    \n    Column(horizontalAlignment \u003d Alignment.CenterHorizontally, \n           modifier \u003d Modifier.background(Color.White)) {  // Add background here\n        PieChart(\n            modifier \u003d Modifier\n                .size(320.dp)\n                .align(Alignment.CenterHorizontally)\n                .background(Color.White),  // Add background here\n            pieChartData \u003d PieChartData(slices \u003d pieSlices, plotType \u003d PlotType.Pie),\n            pieChartConfig \u003d pieChartConfig\n        )\n        // ... existing code ...\n    }\n}\n```\n\nThe issue is that you\u0027re using `Color.Transparent` for some chart backgrounds, which can cause rendering issues on physical devices. By explicitly setting all backgrounds to `Color.White` (or another solid color), you should eliminate the black artifacts. \n\nThe main changes:\n1. Changed all instances of `backgroundColor \u003d Color.Transparent` to `backgroundColor \u003d Color.White`\n2. Added `.background(Color.White)` modifier to containers that might need it\n3. Made sure all chart components have explicit background colors\n\nThis should resolve the black artifacts showing up on your physical device.&quot;}]}" />
+      </map>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: app/src/main/java/com/example/myhealthpassport/Composables/GetHealthInfo.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.myhealthpassport.Composables\r\n\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.foundation.text.KeyboardOptions\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.automirrored.filled.ArrowBack\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.ExtendedFloatingActionButton\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.OutlinedTextField\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TextFieldDefaults\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.alpha\r\nimport androidx.compose.ui.graphics.Brush\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.graphics.painter.Painter\r\nimport androidx.compose.ui.layout.ContentScale\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.text.TextStyle\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.input.KeyboardType\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.navigation.NavController\r\nimport androidx.navigation.compose.rememberNavController\r\nimport com.example.myhealthpassport.R\r\nimport com.example.myhealthpassport.ViewModels.HealthViewModel\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun GetHealthInfo(\r\n    navController: NavController,\r\n    healthViewModel: HealthViewModel\r\n){\r\n    var medicalID: String by remember { mutableStateOf(\"\") }\r\n    var name: String by remember { mutableStateOf(\"\") }\r\n    var bloodGroup: String by remember { mutableStateOf(\"\") }\r\n    var age: String by remember { mutableStateOf(\"\") }\r\n    var ageInt: Int by remember { mutableStateOf(0) }\r\n    var weight: String by remember { mutableStateOf(\"\") }\r\n    var weightFloat: Float by remember { mutableStateOf(0.0f) }\r\n    var height: String by remember { mutableStateOf(\"\") }\r\n    var heightFloat: Float by remember { mutableStateOf(0.0f) }\r\n    var gender: String by remember { mutableStateOf(\"\") }\r\n    var healthCondition: String by remember { mutableStateOf(\"\") }\r\n    var emergencyPhoneNumber: String by remember { mutableStateOf(\"\") }\r\n    var emergencyPhoneNumberLong: Long by remember { mutableStateOf(0) }\r\n    var address: String by remember { mutableStateOf(\"\") }\r\n    var allergies: String by remember { mutableStateOf(\"\") }\r\n    var medications: String by remember { mutableStateOf(\"\") }\r\n    var systolicBP by remember { mutableStateOf(\"\") }\r\n    var systolicBPInt by remember { mutableStateOf(0) }\r\n\r\n    var diastolicBP by remember { mutableStateOf(\"\") }\r\n    var diastolicBPInt by remember { mutableStateOf(0) }\r\n    var bloodSugarLevel: String by remember { mutableStateOf(\"\") }\r\n    var bloodSugarLevelInt: Int by remember { mutableStateOf(0) }\r\n\r\n    var errorMessage by remember { mutableStateOf(\"\") }\r\n\r\n    val gradient = Brush.horizontalGradient(\r\n        colors = listOf(Color(0xFF00BCD4), Color(0xFF1E88E5))\r\n    )\r\n\r\n    val outlinedFieldColors = TextFieldDefaults.textFieldColors(\r\n        containerColor = Color.Transparent,\r\n        unfocusedIndicatorColor = Color.Transparent,\r\n        focusedIndicatorColor = Color.Transparent,\r\n        focusedTextColor = Color(0xFF181411),\r\n        cursorColor = Color(0xFF1E88E5) // Blue for cursor\r\n    )\r\n\r\n    val rowModifier = Modifier\r\n        .padding(top = 12.dp)\r\n        .background(Color(0xFFB2EBF2).copy(alpha = 0.3f), shape = RoundedCornerShape(12.dp))\r\n\r\n    // Apply updated colors to all input fields\r\n    val textFieldModifier = Modifier\r\n        .fillMaxWidth()\r\n        .background(Color(0xFFE3F2FD)) // Light cyan\r\n\r\n    val labelTextColor = Color(0xFF0D47A1) // Dark navy blue\r\n\r\n    val backgroundPainter: Painter = painterResource(id = R.drawable.healthcare)\r\n\r\n    val context = LocalContext.current\r\n    val scrollView = rememberScrollState()\r\n\r\n    Box(modifier = Modifier.fillMaxSize().background(color = Color.White)){\r\n        Image(\r\n            painter = backgroundPainter,\r\n            contentDescription = null,\r\n            contentScale = ContentScale.Fit,\r\n            modifier = Modifier.matchParentSize()\r\n                .alpha(0.5f),\r\n        )\r\n\r\n        Column(modifier = Modifier\r\n            .fillMaxSize()\r\n            .verticalScroll(scrollView)) {\r\n\r\n            Column(\r\n                modifier = Modifier\r\n                    .padding(horizontal = 24.dp)\r\n                    .fillMaxWidth(),\r\n                horizontalAlignment = Alignment.CenterHorizontally,\r\n                verticalArrangement = Arrangement.Center\r\n            ) {\r\n                Row(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth(), verticalAlignment = Alignment.CenterVertically\r\n                ) {\r\n\r\n                    Row(modifier = rowModifier,\r\n                        verticalAlignment = Alignment.CenterVertically\r\n                    ) {\r\n                        OutlinedTextField(\r\n                            modifier = Modifier.fillMaxWidth(0.65f)\r\n                                .background(Color.Transparent),\r\n                            value = medicalID,\r\n                            onValueChange = { medicalID = it },\r\n                            label = {\r\n                                Text(text = \"Medical ID\")\r\n                            },\r\n                            colors = outlinedFieldColors,\r\n\r\n                            textStyle = TextStyle(fontSize = 18.sp),\r\n                        )\r\n                    }\r\n//                    OutlinedTextField(\r\n//                        modifier = Modifier.fillMaxWidth(0.6f).background(Color(0xFFE3F2FD)),\r\n//                        value = medicalID,\r\n//                        onValueChange = { medicalID = it },\r\n//                        label = {\r\n//                            Text(text = \"MedicalID\", color = Color(0xFF0D47A1))\r\n//                        }\r\n//                    )\r\n                    ExtendedFloatingActionButton(\r\n                        modifier = Modifier\r\n                            .padding(start = 8.dp)\r\n                            .background(gradient, shape = RoundedCornerShape(8.dp))\r\n                            .width(100.dp),\r\n                        onClick = {\r\n                            healthViewModel.retrieveHealthData(\r\n                                medicalID = medicalID,\r\n                                context = context\r\n                            ) { data ->\r\n                                name = data.name\r\n                                bloodGroup = data.bloodGroup\r\n                                age = data.age.toString()\r\n                                ageInt = age.toInt()\r\n                                systolicBP = data.systolicBP.toString()\r\n                                systolicBPInt = systolicBP.toInt()\r\n                                diastolicBP = data.diastolicBP.toString()\r\n                                diastolicBPInt = diastolicBP.toInt()\r\n                                bloodSugarLevel = data.bloodSugarLevel.toString()\r\n                                bloodSugarLevelInt = bloodSugarLevel.toInt()\r\n                                weight = data.weight.toString()\r\n                                weightFloat = data.weight.toFloat()\r\n                                height = data.height.toString()\r\n                                heightFloat = data.height.toFloat()\r\n                                gender = data.gender\r\n                                healthCondition = data.healthCondition\r\n                                emergencyPhoneNumber = data.emergencyPhoneNumber.toString()\r\n                                emergencyPhoneNumberLong = data.emergencyPhoneNumber.toLong()\r\n                                address = data.address\r\n                                allergies = data.allergies\r\n                                medications = data.medications\r\n                            }\r\n                        }\r\n                    ) {\r\n                        Text(text = \"Get Data\", textAlign = TextAlign.Center, color = Color.Black)\r\n                    }\r\n                }\r\n\r\n                Spacer(Modifier.height(8.dp))\r\n\r\n                Text(\r\n                    text = \"Name\",\r\n                    fontWeight = FontWeight.W500,\r\n                    modifier = Modifier.align(Alignment.Start),\r\n                    fontSize = 16.sp\r\n                )\r\n                Row(modifier = rowModifier,\r\n                    verticalAlignment = Alignment.CenterVertically\r\n                ) {\r\n                    OutlinedTextField(\r\n                        modifier = Modifier\r\n                            .fillMaxWidth()\r\n                            .background(Color.Transparent),\r\n                        value = name,\r\n                        onValueChange = { name = it },\r\n                        label = {\r\n                            Text(text = \"Name\")\r\n                        },\r\n                        colors = outlinedFieldColors,\r\n\r\n                        textStyle = TextStyle(fontSize = 18.sp),\r\n                    )\r\n                }\r\n\r\n                Spacer(Modifier.height(8.dp))\r\n\r\n                Text(\r\n                    text = \"Blood Group\",\r\n                    fontWeight = FontWeight.W500,\r\n                    modifier = Modifier.align(Alignment.Start),\r\n                    fontSize = 16.sp\r\n                )\r\n                Row(modifier = rowModifier,\r\n                    verticalAlignment = Alignment.CenterVertically\r\n                ) {\r\n                    OutlinedTextField(\r\n                        modifier = Modifier\r\n                            .fillMaxWidth()\r\n                            .background(Color.Transparent),\r\n                        value = bloodGroup,\r\n                        onValueChange = { bloodGroup = it },\r\n                        label = {\r\n                            Text(text = \"Blood Group\")\r\n                        },\r\n                        colors = outlinedFieldColors,\r\n\r\n                        textStyle = TextStyle(fontSize = 18.sp),\r\n                    )\r\n                }\r\n\r\n                Spacer(Modifier.height(8.dp))\r\n\r\n                Text(\r\n                    text = \"Age\",\r\n                    fontWeight = FontWeight.W500,\r\n                    modifier = Modifier.align(Alignment.Start),\r\n                    fontSize = 16.sp\r\n                )\r\n                Row(modifier = rowModifier,\r\n                    verticalAlignment = Alignment.CenterVertically\r\n                ) {\r\n                    OutlinedTextField(\r\n                        modifier = Modifier\r\n                            .fillMaxWidth()\r\n                            .background(Color.Transparent),\r\n                        value = age,\r\n                        onValueChange = {\r\n                            age = it\r\n                            if (age.isNotEmpty()) {\r\n                                ageInt = age.toInt()\r\n                            }\r\n                        },\r\n                        label = {\r\n                            Text(text = \"Age\")\r\n                        },\r\n                        colors = outlinedFieldColors,\r\n\r\n                        textStyle = TextStyle(fontSize = 18.sp),\r\n                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number)\r\n                    )\r\n                }\r\n                Spacer(Modifier.height(8.dp))\r\n\r\n                Row(Modifier.fillMaxWidth()) {\r\n                    Column(\r\n                        Modifier\r\n                            .fillMaxWidth(0.5f)\r\n                            .padding(end = 4.dp)\r\n                    ) {\r\n                        Text(\r\n                            text = \"Systolic BP\",\r\n                            fontWeight = FontWeight.W500,\r\n                            fontSize = 16.sp\r\n                        )\r\n                        Row(\r\n                            modifier = Modifier\r\n                                .padding(top = 12.dp)\r\n                                .background(Color(0xFFB2EBF2).copy(alpha = 0.3f), shape = RoundedCornerShape(12.dp)),\r\n                            verticalAlignment = Alignment.CenterVertically\r\n                        ) {\r\n                            OutlinedTextField(\r\n                                modifier = Modifier\r\n                                    .fillMaxWidth()\r\n                                    .background(Color.Transparent),\r\n                                value = systolicBP,\r\n                                onValueChange = {\r\n                                    systolicBP = it\r\n                                    if (systolicBP.isNotEmpty()) {\r\n                                        systolicBPInt = systolicBP.toInt()\r\n                                    }\r\n                                },\r\n                                label = { Text(\"Systolic (mmHg)\") },\r\n                                isError = errorMessage.isNotEmpty(),\r\n                                colors = TextFieldDefaults.textFieldColors(\r\n                                    containerColor = Color.Transparent,\r\n                                    unfocusedIndicatorColor = Color.Transparent,\r\n                                    focusedIndicatorColor = Color.Transparent,\r\n                                    focusedTextColor = Color(0xFF181411)\r\n                                ),\r\n                                textStyle = TextStyle(fontSize = 18.sp),\r\n                                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),\r\n                                singleLine = true\r\n                            )\r\n                        }\r\n                    }\r\n\r\n                    Column(\r\n                        Modifier\r\n                            .fillMaxWidth()\r\n                            .padding(start = 4.dp)\r\n                    ) {\r\n                        Text(\r\n                            text = \"Diastolic BP\",\r\n                            fontWeight = FontWeight.W500,\r\n                            fontSize = 16.sp\r\n                        )\r\n                        Row(\r\n                            modifier = Modifier\r\n                                .padding(top = 12.dp)\r\n                                .background(Color(0xFFB2EBF2).copy(alpha = 0.3f), shape = RoundedCornerShape(12.dp)),\r\n                            verticalAlignment = Alignment.CenterVertically\r\n                        ) {\r\n                            OutlinedTextField(\r\n                                modifier = Modifier\r\n                                    .fillMaxWidth()\r\n                                    .background(Color.Transparent),\r\n                                value = diastolicBP,\r\n                                onValueChange = {\r\n                                    diastolicBP = it\r\n                                    if (diastolicBP.isNotEmpty()) {\r\n                                        diastolicBPInt = diastolicBP.toInt()\r\n                                    }\r\n                                },\r\n                                label = { Text(\"Diastolic (mmHg)\") },\r\n                                isError = errorMessage.isNotEmpty(),\r\n                                colors = TextFieldDefaults.textFieldColors(\r\n                                    containerColor = Color.Transparent,\r\n                                    unfocusedIndicatorColor = Color.Transparent,\r\n                                    focusedIndicatorColor = Color.Transparent,\r\n                                    focusedTextColor = Color(0xFF181411)\r\n                                ),\r\n                                textStyle = TextStyle(fontSize = 18.sp),\r\n                                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),\r\n                                singleLine = true\r\n                            )\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (errorMessage.isNotEmpty()) {\r\n                    Text(text = errorMessage, color = Color.Red, modifier = Modifier.padding(top = 4.dp))\r\n                }\r\n\r\n\r\n                Spacer(Modifier.height(8.dp))\r\n\r\n                Text(\r\n                    text = \"Blood Sugar\",\r\n                    fontWeight = FontWeight.W500,\r\n                    modifier = Modifier.align(Alignment.Start),\r\n                    fontSize = 16.sp\r\n                )\r\n                Row(modifier = rowModifier,\r\n                    verticalAlignment = Alignment.CenterVertically\r\n                ) {\r\n                    OutlinedTextField(\r\n                        modifier = Modifier\r\n                            .fillMaxWidth()\r\n                            .background(Color.Transparent),\r\n                        value = bloodSugarLevel,\r\n                        onValueChange = {\r\n                            bloodSugarLevel = it\r\n                            if (bloodSugarLevel.isNotEmpty()) {\r\n                                bloodSugarLevelInt = bloodSugarLevel.toInt()\r\n                            }\r\n                        },\r\n                        label = {\r\n                            Text(text = \"Blood Sugar\")\r\n                        },\r\n                        colors = outlinedFieldColors,\r\n\r\n                        textStyle = TextStyle(fontSize = 18.sp),\r\n                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number)\r\n                    )\r\n                }\r\n                Spacer(Modifier.height(8.dp))\r\n\r\n                Row(Modifier.fillMaxWidth()) {\r\n                    Column(Modifier.fillMaxWidth(0.5f).padding(end = 4.dp)){\r\n                        Text(\r\n                            text = \"Weight\",\r\n                            fontWeight = FontWeight.W500,\r\n                            modifier = Modifier,\r\n                            fontSize = 16.sp\r\n                        )\r\n                        Row(\r\n                            modifier = Modifier\r\n                                .padding(top = 12.dp)\r\n                                .background(Color(0xFFB2EBF2).copy(alpha = 0.3f), shape = RoundedCornerShape(12.dp)),\r\n                            verticalAlignment = Alignment.CenterVertically\r\n                        ) {\r\n                            OutlinedTextField(\r\n                                modifier = Modifier\r\n                                    .background(Color.Transparent),\r\n                                value = weight,\r\n                                onValueChange = {\r\n                                    weight = it\r\n                                    if (weight.isNotEmpty()) {\r\n                                        weightFloat = weight.toFloat()\r\n                                    }\r\n                                },\r\n                                label = {\r\n                                    Text(text = \"Weight\")\r\n                                },\r\n                                colors = TextFieldDefaults.textFieldColors(\r\n                                    containerColor = Color.Transparent,\r\n                                    unfocusedIndicatorColor = Color.Transparent,\r\n                                    focusedIndicatorColor = Color.Transparent,\r\n                                    focusedTextColor = Color(0xFF181411)\r\n                                ),\r\n                                textStyle = TextStyle(fontSize = 18.sp),\r\n                                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number)\r\n                            )\r\n                        }\r\n                    }\r\n                    Column(Modifier.fillMaxWidth().padding(start = 4.dp)) {\r\n                        Text(\r\n                            text = \"Height\",\r\n                            fontWeight = FontWeight.W500,\r\n                            modifier = Modifier,\r\n                            fontSize = 16.sp\r\n                        )\r\n                        Row(\r\n                            modifier = Modifier\r\n                                .padding(top = 12.dp)\r\n                                .background(Color(0xFFB2EBF2).copy(alpha = 0.3f), shape = RoundedCornerShape(12.dp)),\r\n                            verticalAlignment = Alignment.CenterVertically\r\n                        ) {\r\n                            OutlinedTextField(\r\n                                modifier = Modifier\r\n                                    .background(Color.Transparent),\r\n                                value = height,\r\n                                onValueChange = {\r\n                                    height = it\r\n                                    if (height.isNotEmpty()) {\r\n                                        heightFloat = height.toFloat()\r\n                                    }\r\n                                },\r\n                                label = {\r\n                                    Text(text = \"Height\")\r\n                                },\r\n                                colors = TextFieldDefaults.textFieldColors(\r\n                                    containerColor = Color.Transparent,\r\n                                    unfocusedIndicatorColor = Color.Transparent,\r\n                                    focusedIndicatorColor = Color.Transparent,\r\n                                    focusedTextColor = Color(0xFF181411)\r\n                                ),\r\n                                textStyle = TextStyle(fontSize = 18.sp),\r\n                                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number)\r\n                            )\r\n                        }\r\n                    }\r\n                }\r\n\r\n                Spacer(Modifier.height(8.dp))\r\n\r\n                Text(\r\n                    text = \"Gender\",\r\n                    fontWeight = FontWeight.W500,\r\n                    modifier = Modifier.align(Alignment.Start),\r\n                    fontSize = 16.sp\r\n                )\r\n                Row(modifier = rowModifier,\r\n                    verticalAlignment = Alignment.CenterVertically\r\n                ) {\r\n                    OutlinedTextField(\r\n                        modifier = Modifier\r\n                            .fillMaxWidth()\r\n                            .background(Color.Transparent),\r\n                        value = gender,\r\n                        onValueChange = { gender = it },\r\n                        label = {\r\n                            Text(text = \"Gender\")\r\n                        },\r\n                        colors = outlinedFieldColors,\r\n\r\n                        textStyle = TextStyle(fontSize = 18.sp),\r\n                    )\r\n                }\r\n                Spacer(Modifier.height(8.dp))\r\n\r\n                Text(\r\n                    text = \"Health Condition\",\r\n                    fontWeight = FontWeight.W500,\r\n                    modifier = Modifier.align(Alignment.Start),\r\n                    fontSize = 16.sp\r\n                )\r\n                Row(modifier = rowModifier,\r\n                    verticalAlignment = Alignment.CenterVertically\r\n                ) {\r\n                    OutlinedTextField(\r\n                        modifier = Modifier\r\n                            .fillMaxWidth()\r\n                            .background(Color.Transparent),\r\n                        value = healthCondition,\r\n                        onValueChange = { healthCondition = it },\r\n                        label = {\r\n                            Text(text = \"Health Condition\")\r\n                        },\r\n                        colors = outlinedFieldColors,\r\n\r\n                        textStyle = TextStyle(fontSize = 18.sp),\r\n                    )\r\n                }\r\n                Spacer(Modifier.height(8.dp))\r\n\r\n                Text(\r\n                    text = \"Emergency Phone Number\",\r\n                    fontWeight = FontWeight.W500,\r\n                    modifier = Modifier.align(Alignment.Start),\r\n                    fontSize = 16.sp\r\n                )\r\n                Row(modifier = rowModifier,\r\n                    verticalAlignment = Alignment.CenterVertically\r\n                ) {\r\n                    OutlinedTextField(\r\n                        modifier = Modifier\r\n                            .fillMaxWidth().background(Color.Transparent),\r\n                        value = emergencyPhoneNumber,\r\n                        onValueChange = {\r\n                            emergencyPhoneNumber = it\r\n                            if (emergencyPhoneNumber.isNotEmpty()) {\r\n                                emergencyPhoneNumberLong = emergencyPhoneNumber.toLong()\r\n                            }\r\n                        },\r\n                        label = { Text(\"Emergency Phone Number\") },\r\n                        isError = errorMessage.isNotEmpty(),\r\n                        colors = outlinedFieldColors,\r\n\r\n                        textStyle = TextStyle(fontSize = 18.sp),\r\n                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number)\r\n                    )\r\n\r\n                }\r\n                Spacer(Modifier.height(8.dp))\r\n\r\n                Text(\r\n                    text = \"Address\",\r\n                    fontWeight = FontWeight.W500,\r\n                    modifier = Modifier.align(Alignment.Start),\r\n                    fontSize = 16.sp\r\n                )\r\n                Row(modifier = rowModifier,\r\n                    verticalAlignment = Alignment.CenterVertically\r\n                ) {\r\n                    OutlinedTextField(\r\n                        modifier = Modifier\r\n                            .fillMaxWidth().background(Color.Transparent),\r\n                        value = address,\r\n                        onValueChange = { address = it },\r\n                        label = {\r\n                            Text(text = \"Address\")\r\n                        },\r\n                        colors = outlinedFieldColors,\r\n\r\n                        textStyle = TextStyle(fontSize = 18.sp),\r\n                    )\r\n                }\r\n                Spacer(Modifier.height(8.dp))\r\n\r\n                Text(\r\n                    text = \"Allergies\",\r\n                    fontWeight = FontWeight.W500,\r\n                    modifier = Modifier.align(Alignment.Start),\r\n                    fontSize = 16.sp\r\n                )\r\n                Row(modifier = rowModifier,\r\n                    verticalAlignment = Alignment.CenterVertically\r\n                ) {\r\n                    OutlinedTextField(\r\n                        modifier = Modifier\r\n                            .fillMaxWidth().background(Color.Transparent),\r\n                        value = allergies,\r\n                        onValueChange = { allergies = it },\r\n                        label = {\r\n                            Text(text = \"Allergies\")\r\n                        },\r\n                        colors = outlinedFieldColors,\r\n\r\n                        textStyle = TextStyle(fontSize = 18.sp),\r\n                    )\r\n                }\r\n                Spacer(Modifier.height(8.dp))\r\n\r\n                Text(\r\n                    text = \"Medications\",\r\n                    fontWeight = FontWeight.W500,\r\n                    modifier = Modifier.align(Alignment.Start),\r\n                    fontSize = 16.sp\r\n                )\r\n                Row(modifier = rowModifier,\r\n                    verticalAlignment = Alignment.CenterVertically\r\n                ) {\r\n                    OutlinedTextField(\r\n                        modifier = Modifier\r\n                            .fillMaxWidth()\r\n                            .background(Color.Transparent),\r\n                        value = medications,\r\n                        onValueChange = { medications = it },\r\n                        label = {\r\n                            Text(text = \"Medications\")\r\n                        },\r\n                        colors = outlinedFieldColors,\r\n\r\n                        textStyle = TextStyle(fontSize = 18.sp),\r\n                    )\r\n                }\r\n                ExtendedFloatingActionButton(modifier = Modifier\r\n                    .padding(12.dp)\r\n                    .padding(top = 8.dp)\r\n                    .background(gradient, shape = RoundedCornerShape(8.dp)),\r\n                    onClick = {\r\n                        healthViewModel.delete(\r\n                            medicalID = medicalID,\r\n                            context = context,\r\n                            navController = navController\r\n                        )\r\n                    }) {\r\n                    Text(text = \"Delete\")\r\n                }\r\n                ExtendedFloatingActionButton(modifier = Modifier\r\n                    .padding(bottom = 24.dp)\r\n                    .background(gradient, shape = RoundedCornerShape(8.dp)),\r\n                    onClick = {\r\n                        val patientData = listOf(\r\n                            medicalID,\r\n                            name,\r\n                            bloodGroup,\r\n                            age,\r\n                            gender,\r\n                            healthCondition,\r\n                            emergencyPhoneNumber,\r\n                            address,\r\n                            allergies,\r\n                            medications\r\n                        )\r\n                        navController.navigate(\"patient_details/$patientData\")\r\n                    }) {\r\n                    Text(text = \"Open Data in new Screen\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nfun GetHealthInfoPreview()\r\n{\r\n    GetHealthInfo(navController = rememberNavController(), healthViewModel = HealthViewModel())\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/myhealthpassport/Composables/GetHealthInfo.kt b/app/src/main/java/com/example/myhealthpassport/Composables/GetHealthInfo.kt
--- a/app/src/main/java/com/example/myhealthpassport/Composables/GetHealthInfo.kt	(revision 3b31d7d4d68eec37bca96d6b82e67a49df764548)
+++ b/app/src/main/java/com/example/myhealthpassport/Composables/GetHealthInfo.kt	(date 1741114295901)
@@ -40,6 +40,7 @@
 import androidx.compose.ui.platform.LocalContext
 import androidx.compose.ui.res.painterResource
 import androidx.compose.ui.text.TextStyle
+import androidx.compose.ui.text.font.FontStyle
 import androidx.compose.ui.text.font.FontWeight
 import androidx.compose.ui.text.input.KeyboardType
 import androidx.compose.ui.text.style.TextAlign
@@ -131,6 +132,17 @@
                 horizontalAlignment = Alignment.CenterHorizontally,
                 verticalArrangement = Arrangement.Center
             ) {
+
+                Text(
+                    text = "Get Medical Info", fontSize = 24.sp, fontStyle = FontStyle.Normal,
+                    modifier = Modifier
+                        .padding(vertical = 12.dp),
+                    color = Color.Black,
+                    fontWeight = FontWeight.W500
+                )
+
+                Spacer(Modifier.height(8.dp))
+
                 Row(
                     modifier = Modifier
                         .fillMaxWidth(), verticalAlignment = Alignment.CenterVertically
@@ -145,7 +157,7 @@
                             value = medicalID,
                             onValueChange = { medicalID = it },
                             label = {
-                                Text(text = "Medical ID")
+                                Text(text = "Medical ID", color = Color.Gray)
                             },
                             colors = outlinedFieldColors,
 
@@ -165,6 +177,7 @@
                             .padding(start = 8.dp)
                             .background(gradient, shape = RoundedCornerShape(8.dp))
                             .width(100.dp),
+                        containerColor = Color(0xFFE9EFF9),
                         onClick = {
                             healthViewModel.retrieveHealthData(
                                 medicalID = medicalID,
@@ -203,6 +216,7 @@
                 Text(
                     text = "Name",
                     fontWeight = FontWeight.W500,
+                    color = Color.Black,
                     modifier = Modifier.align(Alignment.Start),
                     fontSize = 16.sp
                 )
@@ -216,7 +230,7 @@
                         value = name,
                         onValueChange = { name = it },
                         label = {
-                            Text(text = "Name")
+                            Text(text = "Name", color = Color.Gray)
                         },
                         colors = outlinedFieldColors,
 
@@ -229,6 +243,7 @@
                 Text(
                     text = "Blood Group",
                     fontWeight = FontWeight.W500,
+                    color = Color.Black,
                     modifier = Modifier.align(Alignment.Start),
                     fontSize = 16.sp
                 )
@@ -242,7 +257,7 @@
                         value = bloodGroup,
                         onValueChange = { bloodGroup = it },
                         label = {
-                            Text(text = "Blood Group")
+                            Text(text = "Blood Group", color = Color.Gray)
                         },
                         colors = outlinedFieldColors,
 
@@ -255,6 +270,7 @@
                 Text(
                     text = "Age",
                     fontWeight = FontWeight.W500,
+                    color = Color.Black,
                     modifier = Modifier.align(Alignment.Start),
                     fontSize = 16.sp
                 )
@@ -273,7 +289,7 @@
                             }
                         },
                         label = {
-                            Text(text = "Age")
+                            Text(text = "Age", color = Color.Gray)
                         },
                         colors = outlinedFieldColors,
 
@@ -292,6 +308,7 @@
                         Text(
                             text = "Systolic BP",
                             fontWeight = FontWeight.W500,
+                            color = Color.Black,
                             fontSize = 16.sp
                         )
                         Row(
@@ -311,7 +328,7 @@
                                         systolicBPInt = systolicBP.toInt()
                                     }
                                 },
-                                label = { Text("Systolic (mmHg)") },
+                                label = { Text("Systolic (mmHg)", color = Color.Gray) },
                                 isError = errorMessage.isNotEmpty(),
                                 colors = TextFieldDefaults.textFieldColors(
                                     containerColor = Color.Transparent,
@@ -333,6 +350,7 @@
                     ) {
                         Text(
                             text = "Diastolic BP",
+                            color = Color.Black,
                             fontWeight = FontWeight.W500,
                             fontSize = 16.sp
                         )
@@ -353,7 +371,7 @@
                                         diastolicBPInt = diastolicBP.toInt()
                                     }
                                 },
-                                label = { Text("Diastolic (mmHg)") },
+                                label = { Text("Diastolic (mmHg)", color = Color.Gray) },
                                 isError = errorMessage.isNotEmpty(),
                                 colors = TextFieldDefaults.textFieldColors(
                                     containerColor = Color.Transparent,
@@ -379,6 +397,7 @@
                 Text(
                     text = "Blood Sugar",
                     fontWeight = FontWeight.W500,
+                    color = Color.Black,
                     modifier = Modifier.align(Alignment.Start),
                     fontSize = 16.sp
                 )
@@ -397,7 +416,7 @@
                             }
                         },
                         label = {
-                            Text(text = "Blood Sugar")
+                            Text(text = "Blood Sugar", color = Color.Gray)
                         },
                         colors = outlinedFieldColors,
 
@@ -411,6 +430,7 @@
                     Column(Modifier.fillMaxWidth(0.5f).padding(end = 4.dp)){
                         Text(
                             text = "Weight",
+                            color = Color.Black,
                             fontWeight = FontWeight.W500,
                             modifier = Modifier,
                             fontSize = 16.sp
@@ -432,7 +452,7 @@
                                     }
                                 },
                                 label = {
-                                    Text(text = "Weight")
+                                    Text(text = "Weight", color = Color.Gray)
                                 },
                                 colors = TextFieldDefaults.textFieldColors(
                                     containerColor = Color.Transparent,
@@ -448,6 +468,7 @@
                     Column(Modifier.fillMaxWidth().padding(start = 4.dp)) {
                         Text(
                             text = "Height",
+                            color = Color.Black,
                             fontWeight = FontWeight.W500,
                             modifier = Modifier,
                             fontSize = 16.sp
@@ -469,7 +490,7 @@
                                     }
                                 },
                                 label = {
-                                    Text(text = "Height")
+                                    Text(text = "Height", color = Color.Gray)
                                 },
                                 colors = TextFieldDefaults.textFieldColors(
                                     containerColor = Color.Transparent,
@@ -488,6 +509,7 @@
 
                 Text(
                     text = "Gender",
+                    color = Color.Black,
                     fontWeight = FontWeight.W500,
                     modifier = Modifier.align(Alignment.Start),
                     fontSize = 16.sp
@@ -502,7 +524,7 @@
                         value = gender,
                         onValueChange = { gender = it },
                         label = {
-                            Text(text = "Gender")
+                            Text(text = "Gender", color = Color.Gray)
                         },
                         colors = outlinedFieldColors,
 
@@ -513,6 +535,7 @@
 
                 Text(
                     text = "Health Condition",
+                    color = Color.Black,
                     fontWeight = FontWeight.W500,
                     modifier = Modifier.align(Alignment.Start),
                     fontSize = 16.sp
@@ -527,7 +550,7 @@
                         value = healthCondition,
                         onValueChange = { healthCondition = it },
                         label = {
-                            Text(text = "Health Condition")
+                            Text(text = "Health Condition", color = Color.Gray)
                         },
                         colors = outlinedFieldColors,
 
@@ -538,6 +561,7 @@
 
                 Text(
                     text = "Emergency Phone Number",
+                    color = Color.Black,
                     fontWeight = FontWeight.W500,
                     modifier = Modifier.align(Alignment.Start),
                     fontSize = 16.sp
@@ -555,7 +579,7 @@
                                 emergencyPhoneNumberLong = emergencyPhoneNumber.toLong()
                             }
                         },
-                        label = { Text("Emergency Phone Number") },
+                        label = { Text("Emergency Phone Number", color = Color.Gray) },
                         isError = errorMessage.isNotEmpty(),
                         colors = outlinedFieldColors,
 
@@ -568,6 +592,7 @@
 
                 Text(
                     text = "Address",
+                    color = Color.Black,
                     fontWeight = FontWeight.W500,
                     modifier = Modifier.align(Alignment.Start),
                     fontSize = 16.sp
@@ -581,7 +606,7 @@
                         value = address,
                         onValueChange = { address = it },
                         label = {
-                            Text(text = "Address")
+                            Text(text = "Address", color = Color.Gray)
                         },
                         colors = outlinedFieldColors,
 
@@ -592,6 +617,7 @@
 
                 Text(
                     text = "Allergies",
+                    color = Color.Black,
                     fontWeight = FontWeight.W500,
                     modifier = Modifier.align(Alignment.Start),
                     fontSize = 16.sp
@@ -605,7 +631,7 @@
                         value = allergies,
                         onValueChange = { allergies = it },
                         label = {
-                            Text(text = "Allergies")
+                            Text(text = "Allergies", color = Color.Gray)
                         },
                         colors = outlinedFieldColors,
 
@@ -616,6 +642,7 @@
 
                 Text(
                     text = "Medications",
+                    color = Color.Black,
                     fontWeight = FontWeight.W500,
                     modifier = Modifier.align(Alignment.Start),
                     fontSize = 16.sp
@@ -630,7 +657,7 @@
                         value = medications,
                         onValueChange = { medications = it },
                         label = {
-                            Text(text = "Medications")
+                            Text(text = "Medications", color = Color.Gray)
                         },
                         colors = outlinedFieldColors,
 
@@ -641,6 +668,7 @@
                     .padding(12.dp)
                     .padding(top = 8.dp)
                     .background(gradient, shape = RoundedCornerShape(8.dp)),
+                    containerColor = Color(0xFFE9EFF9),
                     onClick = {
                         healthViewModel.delete(
                             medicalID = medicalID,
@@ -648,11 +676,12 @@
                             navController = navController
                         )
                     }) {
-                    Text(text = "Delete")
+                    Text(text = "Delete", color = Color.Black)
                 }
                 ExtendedFloatingActionButton(modifier = Modifier
                     .padding(bottom = 24.dp)
                     .background(gradient, shape = RoundedCornerShape(8.dp)),
+                    containerColor = Color(0xFFE9EFF9),
                     onClick = {
                         val patientData = listOf(
                             medicalID,
@@ -668,7 +697,7 @@
                         )
                         navController.navigate("patient_details/$patientData")
                     }) {
-                    Text(text = "Open Data in new Screen")
+                    Text(text = "Open Data in new Screen", color = Color.Black)
                 }
             }
         }
Index: app/src/main/java/com/example/myhealthpassport/graph/ChartScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.myhealthpassport.graph\r\n\r\nimport android.speech.tts.TextToSpeech\r\nimport android.util.Log\r\nimport androidx.compose.animation.Animatable\r\nimport androidx.compose.animation.AnimatedVisibility\r\nimport androidx.compose.animation.core.LinearEasing\r\nimport androidx.compose.animation.core.tween\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.shape.CircleShape\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.material3.*\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Brush\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.graphics.graphicsLayer\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.text.AnnotatedString\r\nimport androidx.compose.ui.text.SpanStyle\r\nimport androidx.compose.ui.text.buildAnnotatedString\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.withStyle\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.lifecycle.viewmodel.compose.viewModel\r\nimport androidx.navigation.NavController\r\nimport androidx.navigation.compose.rememberNavController\r\nimport co.yml.charts.axis.AxisData\r\nimport co.yml.charts.common.model.PlotType\r\nimport co.yml.charts.common.model.Point\r\nimport co.yml.charts.ui.linechart.LineChart\r\nimport co.yml.charts.ui.linechart.model.*\r\nimport co.yml.charts.ui.piechart.charts.PieChart\r\nimport co.yml.charts.ui.piechart.models.PieChartConfig\r\nimport co.yml.charts.ui.piechart.models.PieChartData\r\nimport com.example.myhealthpassport.ViewModels.AiViewModel\r\nimport com.example.myhealthpassport.ViewModels.HealthViewModel\r\nimport java.util.Locale\r\nimport kotlin.math.max\r\nimport kotlin.math.min\r\nimport kotlin.random.Random\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun ChartScreen(navController: NavController) {\r\n    val context = LocalContext.current\r\n    val medicalIDs = remember { mutableStateListOf<String>() }\r\n    val healthViewModel: HealthViewModel = viewModel()\r\n    val aiViewModel: AiViewModel = viewModel()\r\n\r\n    val bloodPressureList = remember { mutableStateListOf<Pair<Int, Int>>() }\r\n    val bloodSugarLevelList = remember { mutableStateListOf<Int>() }\r\n    val medications = remember { mutableStateMapOf<String, Int>() }\r\n\r\n    var bloodPressureAnalysis by remember { mutableStateOf(\"\") }\r\n    var bloodSugarAnalysis by remember { mutableStateOf(\"\") }\r\n    var medicationAnalysis by remember { mutableStateOf(\"\") }\r\n\r\n    var prompt = \"\"\"Analyze the following health data and provide insights. Identify any trends, potential health risks, and suggest recommendations for improvement. If the data indicates an abnormal pattern, highlight it with possible causes and solutions. Keep the explanation simple and actionable.\r\nEnsure the analysis is easy to understand. Summarize key takeaways in a concise format and include any necessary health precautions.\"\"\"\r\n\r\n    LaunchedEffect(Unit) {\r\n        healthViewModel.fetchMedicalIDs(context) { ids ->\r\n            ids.forEach { id ->\r\n                healthViewModel.retrieveHealthData(id, context) { data ->\r\n                    bloodPressureList.add(Pair(data.systolicBP, data.diastolicBP))\r\n                    bloodSugarLevelList.add(data.bloodSugarLevel)\r\n                    data.medications.split(\",\").forEach { med ->\r\n                        val trimmedMed = med.trim()\r\n                        medications[trimmedMed] = medications.getOrDefault(trimmedMed, 0) + 1\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    Column(\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .background(\r\n                brush = Brush.verticalGradient(\r\n                    colors = listOf(Color(0xFF80D0C7), Color(0xFF0093E9))\r\n                )\r\n            )\r\n            .padding(8.dp)\r\n            .verticalScroll(rememberScrollState()),\r\n        horizontalAlignment = Alignment.CenterHorizontally\r\n    ) {\r\n        Text(\r\n            text = \"\uD83D\uDCCA Health Charts\",\r\n            style = MaterialTheme.typography.titleLarge.copy(fontWeight = FontWeight.Bold),\r\n            color = Color.White\r\n        )\r\n\r\n        Spacer(modifier = Modifier.height(16.dp))\r\n\r\n        if (bloodPressureList.isNotEmpty()) {\r\n            ChartCard(\r\n                title = \"Blood Pressure Trends\",\r\n                content = { BloodPressureChart(bloodPressureList) },\r\n                analyzeData = {\r\n                    aiViewModel.analyzeData(\"$prompt \\n\" +\r\n                            \"Blood Pressure Readings (Systolic/Diastolic in mmHg): $bloodPressureList\") { response ->\r\n                        bloodPressureAnalysis = response\r\n                    }\r\n                },\r\n                aiResponse = bloodPressureAnalysis)\r\n        }\r\n\r\n        if (bloodSugarLevelList.isNotEmpty()) {\r\n            ChartCard(\r\n                title = \"Blood Sugar Levels\",\r\n                content = { BloodSugarChart(bloodSugarLevelList) },\r\n                analyzeData = {\r\n                    aiViewModel.analyzeData(\"$prompt \\n\" +\r\n                            \"Blood Sugar Levels (mg/dL): $bloodSugarLevelList\") { response ->\r\n                        bloodSugarAnalysis = response\r\n                    }\r\n                },\r\n                aiResponse = bloodSugarAnalysis)\r\n        }\r\n\r\n        if (medications.isNotEmpty()) {\r\n            ChartCard(\r\n                title = \"Medication Distribution\",\r\n                content = { MedicationPieChart(medications) },\r\n                analyzeData = {\r\n                    aiViewModel.analyzeData(\"$prompt \\n\" +\r\n                            \"Medication List: $medications\") { response ->\r\n                        medicationAnalysis = response\r\n                    }\r\n                },\r\n                aiResponse = medicationAnalysis)\r\n        }\r\n    }\r\n}\r\n\r\n/** \uD83C\uDFA8 Stylish Card Wrapper **/\r\n@Composable\r\nfun ChartCard(title: String, content: @Composable () -> Unit, analyzeData: () -> Unit, aiResponse: String) {\r\n\r\n    var isLoading by remember { mutableStateOf(false) }\r\n    val context = LocalContext.current\r\n    val tts = remember { TextToSpeech(context) { status ->\r\n        if (status != TextToSpeech.SUCCESS) {\r\n            Log.e(\"TTS\", \"Initialization failed!\")\r\n        }\r\n    } }\r\n\r\n    LaunchedEffect(aiResponse) {\r\n        if (aiResponse.isNotEmpty()) {\r\n            isLoading = false\r\n        }\r\n    }\r\n\r\n    val brush = Brush.verticalGradient(\r\n        colors = listOf(Color(0xFF80D0C7), Color(0xFF0093E9))\r\n    )\r\n\r\n    Card(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .padding(8.dp),\r\n        shape = RoundedCornerShape(12.dp),\r\n        colors = CardDefaults.cardColors(containerColor = Color.White),\r\n        elevation = CardDefaults.cardElevation(defaultElevation = 6.dp)\r\n    ) {\r\n        Column(modifier = Modifier.padding(8.dp).background(Color.Transparent)) {\r\n            Text(\r\n                text = title,\r\n                style = MaterialTheme.typography.bodyLarge.copy(fontWeight = FontWeight.Bold),\r\n                color = Color.Black\r\n            )\r\n            Spacer(modifier = Modifier.height(8.dp))\r\n            content()\r\n\r\n            Button(\r\n                onClick = {\r\n                    isLoading = true\r\n                    analyzeData()\r\n                    },\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .padding(top = 8.dp),\r\n                enabled = !isLoading\r\n            ) {\r\n                if (isLoading) {\r\n                    CircularProgressIndicator(\r\n                        modifier = Modifier.size(24.dp),\r\n                        color = Color.White,\r\n                        strokeWidth = 2.dp\r\n                    )\r\n                } else {\r\n                    Text(\"Get Insights\"+\"\\uD83D\\uDCA1\")\r\n                }\r\n            }\r\n\r\n            if (aiResponse.isNotEmpty()) {\r\n                //isLoading = false\r\n                Text(\r\n                    text = formatText(aiResponse),\r\n                    style = MaterialTheme.typography.bodyMedium,\r\n                    color = Color.DarkGray,\r\n                    modifier = Modifier.padding(top = 8.dp)\r\n                )\r\n                Button(\r\n                    onClick = {\r\n                        tts.speak(aiResponse, TextToSpeech.QUEUE_FLUSH, null, null)\r\n                    },\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .padding(top = 8.dp)\r\n                ) {\r\n                    Text(\"\uD83D\uDD0A Listen\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/** \uD83D\uDCC8 Blood Pressure Chart **/\r\n@Composable\r\nfun BloodPressureChart(bloodPressureList: List<Pair<Int, Int>>) {\r\n    val pointsSystolic = bloodPressureList.mapIndexed { index, pair -> Point(index.toFloat(), pair.first.toFloat()) }\r\n    val pointsDiastolic = bloodPressureList.mapIndexed { index, pair -> Point(index.toFloat(), pair.second.toFloat()) }\r\n\r\n    val isVisible = remember { mutableStateOf(false) }\r\n    LaunchedEffect(Unit) { isVisible.value = true }\r\n\r\n    val minBP = bloodPressureList.minOfOrNull { min(it.first, it.second) } ?: 50\r\n    val maxBP = bloodPressureList.maxOfOrNull { max(it.first, it.second) } ?: 180\r\n    val stepSize = (maxBP - minBP) / 4\r\n\r\n    val lineChartData = LineChartData(\r\n        linePlotData = LinePlotData(\r\n            lines = listOf(\r\n                Line(pointsSystolic, LineStyle(color = Color(0xFF673AB7)),\r\n                    IntersectionPoint(Color(0xFF9C27B0)),\r\n                    SelectionHighlightPoint(Color(0xFF9C27B0)),\r\n                    shadowUnderLine = ShadowUnderLine(Color(0xFFE1BEE7))\r\n                    ),\r\n                Line(pointsDiastolic, LineStyle(color = Color(0xFF311B92)),\r\n                    IntersectionPoint(Color(0xFF9C27B0)),\r\n                    SelectionHighlightPoint(Color(0xFF9C27B0)),\r\n                    shadowUnderLine = ShadowUnderLine(Color(0xFFE1BEE7))\r\n                )\r\n            )\r\n        ),\r\n        xAxisData = AxisData.Builder()\r\n            .axisStepSize(60.dp)\r\n            .axisLabelColor(Color.Black)\r\n            .steps(pointsSystolic.size - 1)\r\n            .labelData { i -> \"${i + 1}\" }\r\n            .labelAndAxisLinePadding(15.dp)\r\n            .backgroundColor(Color.Transparent)\r\n            .build(),\r\n        yAxisData = AxisData.Builder()\r\n            .steps(4)\r\n            .axisLabelColor(Color.Black)\r\n            .labelData { i -> \"${(minBP + (i * stepSize)).toInt()} mmHg\" }\r\n            .labelAndAxisLinePadding(16.dp)\r\n            .backgroundColor(Color.Transparent)\r\n            .build(),\r\n        gridLines = GridLines(),\r\n        backgroundColor = Color.Transparent\r\n    )\r\n\r\n    AnimatedVisibility(visible = isVisible.value) {\r\n        LineChart(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .height(320.dp)\r\n                .graphicsLayer(alpha = if (isVisible.value) 1f else 0f),\r\n            lineChartData = lineChartData\r\n        )\r\n    }\r\n}\r\n\r\n/** \uD83D\uDCC8 Blood Sugar Chart **/\r\n@Composable\r\nfun BloodSugarChart(bloodSugarLevelList: List<Int>) {\r\n    val points = bloodSugarLevelList.mapIndexed { index, level -> Point(index.toFloat(), level.toFloat()) }\r\n\r\n    val uniqueBloodSugarValues = bloodSugarLevelList.distinct().sorted()\r\n\r\n    val isVisible = remember { mutableStateOf(false) }\r\n    LaunchedEffect(Unit) { isVisible.value = true }\r\n\r\n    val lineChartData = LineChartData(\r\n        linePlotData = LinePlotData(lines = listOf(Line(points, LineStyle(color = Color(0xFF388E3C))))),\r\n        xAxisData = AxisData.Builder()\r\n            .steps(points.size - 1)\r\n            .axisStepSize(60.dp)\r\n            .labelData { i -> \"${i + 1}\" }\r\n            .labelAndAxisLinePadding(15.dp)\r\n            .axisLabelColor(Color.Black)\r\n            .backgroundColor(Color.Transparent)\r\n            .build(),\r\n        yAxisData = AxisData.Builder()\r\n            .steps(uniqueBloodSugarValues.size - 1)\r\n            .axisLabelColor(Color.Black)\r\n            .backgroundColor(Color.Transparent)\r\n            .labelAndAxisLinePadding(16.dp)\r\n            .labelData { i -> \"${uniqueBloodSugarValues[i]} mg/dL\" }\r\n            .build(),\r\n        backgroundColor = Color.Transparent\r\n    )\r\n\r\n    AnimatedVisibility(visible = isVisible.value) {\r\n        LineChart(\r\n            modifier = Modifier\r\n            .fillMaxWidth()\r\n            .height(250.dp)\r\n            .graphicsLayer(alpha = if (isVisible.value) 1f else 0f),\r\n            lineChartData = lineChartData\r\n        )\r\n    }\r\n}\r\n\r\n/** \uD83E\uDD67 Medication Pie Chart **/\r\n@Composable\r\nfun MedicationPieChart(medications: Map<String, Int>) {\r\n\r\n   // val medicationColors = remember { medications.keys.associateWith { getRandomColor() } }\r\n\r\n    val animatedColors = remember {\r\n        medications.keys.associateWith { key ->\r\n            Animatable(getRandomColor())\r\n        }\r\n    }\r\n\r\n    LaunchedEffect(Unit) {\r\n        animatedColors.values.forEach { animatable ->\r\n            animatable.animateTo(\r\n                targetValue = getRandomColor(),\r\n                animationSpec = tween(durationMillis = 1500, easing = LinearEasing)\r\n            )\r\n        }\r\n    }\r\n\r\n    val pieSlices = medications.map {\r\n        PieChartData.Slice(it.key, it.value.toFloat(), animatedColors[it.key]?.value ?: Color.Gray)\r\n    }\r\n\r\n    val pieChartConfig = PieChartConfig(\r\n        isAnimationEnable = true,\r\n        showSliceLabels = true,\r\n        animationDuration = 1500,\r\n    )\r\n\r\n    Column(horizontalAlignment = Alignment.CenterHorizontally) {\r\n        PieChart(\r\n            modifier = Modifier\r\n                .size(320.dp)\r\n                .align(Alignment.CenterHorizontally),\r\n            pieChartData = PieChartData(slices = pieSlices, plotType = PlotType.Pie),\r\n            pieChartConfig = pieChartConfig\r\n        )\r\n        Spacer(modifier = Modifier.height(16.dp))\r\n        Column(modifier = Modifier.padding(8.dp)) {\r\n            medications.keys.forEach { medication ->\r\n                Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.padding(4.dp)) {\r\n                    Box(\r\n                        modifier = Modifier\r\n                            .size(16.dp)\r\n                            .background(animatedColors[medication]?.value ?: Color.Gray, shape = CircleShape)\r\n                    )\r\n                    Spacer(modifier = Modifier.width(8.dp))\r\n                    Text(medication, style = MaterialTheme.typography.bodyMedium, color = Color.Black)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfun getRandomColor(): Color = Color(Random.nextFloat(), Random.nextFloat(), Random.nextFloat(), 1f)\r\n\r\n@Composable\r\nfun formatText(text: String): AnnotatedString {\r\n    return buildAnnotatedString {\r\n        var currentIndex = 0\r\n\r\n        val parts = text.split(\"**\")\r\n\r\n        parts.forEachIndexed { index, part ->\r\n            if (index % 2 == 0) {\r\n                append(part)\r\n            } else {\r\n                withStyle(style = SpanStyle(fontWeight = FontWeight.W400, fontSize = 20.sp)) {\r\n                    append(part)\r\n                }\r\n            }\r\n            currentIndex += part.length\r\n        }\r\n    }\r\n}\r\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nfun testc(){\r\n    ChartScreen(rememberNavController())\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/myhealthpassport/graph/ChartScreen.kt b/app/src/main/java/com/example/myhealthpassport/graph/ChartScreen.kt
--- a/app/src/main/java/com/example/myhealthpassport/graph/ChartScreen.kt	(revision 3b31d7d4d68eec37bca96d6b82e67a49df764548)
+++ b/app/src/main/java/com/example/myhealthpassport/graph/ChartScreen.kt	(date 1741271403102)
@@ -171,7 +171,7 @@
         colors = CardDefaults.cardColors(containerColor = Color.White),
         elevation = CardDefaults.cardElevation(defaultElevation = 6.dp)
     ) {
-        Column(modifier = Modifier.padding(8.dp).background(Color.Transparent)) {
+        Column(modifier = Modifier.padding(8.dp).background(Color.White)) {
             Text(
                 text = title,
                 style = MaterialTheme.typography.bodyLarge.copy(fontWeight = FontWeight.Bold),
@@ -255,20 +255,22 @@
         xAxisData = AxisData.Builder()
             .axisStepSize(60.dp)
             .axisLabelColor(Color.Black)
+            .axisLineColor(Color.Gray)
             .steps(pointsSystolic.size - 1)
             .labelData { i -> "${i + 1}" }
             .labelAndAxisLinePadding(15.dp)
-            .backgroundColor(Color.Transparent)
+            .backgroundColor(Color.White)
             .build(),
         yAxisData = AxisData.Builder()
             .steps(4)
             .axisLabelColor(Color.Black)
+            .axisLineColor(Color.Gray)
             .labelData { i -> "${(minBP + (i * stepSize)).toInt()} mmHg" }
             .labelAndAxisLinePadding(16.dp)
-            .backgroundColor(Color.Transparent)
+            .backgroundColor(Color.White)
             .build(),
         gridLines = GridLines(),
-        backgroundColor = Color.Transparent
+        backgroundColor = Color.White
     )
 
     AnimatedVisibility(visible = isVisible.value) {
@@ -276,6 +278,7 @@
             modifier = Modifier
                 .fillMaxWidth()
                 .height(320.dp)
+                .background(Color.White)
                 .graphicsLayer(alpha = if (isVisible.value) 1f else 0f),
             lineChartData = lineChartData
         )
@@ -300,16 +303,19 @@
             .labelData { i -> "${i + 1}" }
             .labelAndAxisLinePadding(15.dp)
             .axisLabelColor(Color.Black)
-            .backgroundColor(Color.Transparent)
+            .axisLineColor(Color.Gray)
+            .backgroundColor(Color.White)
             .build(),
         yAxisData = AxisData.Builder()
             .steps(uniqueBloodSugarValues.size - 1)
             .axisLabelColor(Color.Black)
-            .backgroundColor(Color.Transparent)
+            .axisLineColor(Color.Gray)
+            .backgroundColor(Color.White)
             .labelAndAxisLinePadding(16.dp)
             .labelData { i -> "${uniqueBloodSugarValues[i]} mg/dL" }
             .build(),
-        backgroundColor = Color.Transparent
+        gridLines = GridLines(),
+        backgroundColor = Color.White
     )
 
     AnimatedVisibility(visible = isVisible.value) {
@@ -317,6 +323,7 @@
             modifier = Modifier
             .fillMaxWidth()
             .height(250.dp)
+            .background(Color.White)
             .graphicsLayer(alpha = if (isVisible.value) 1f else 0f),
             lineChartData = lineChartData
         )
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\">\r\n\r\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\r\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" android:maxSdkVersion=\"28\"/>\r\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\r\n    <uses-permission android:name=\"android.permission.READ_MEDIA_IMAGES\" />\r\n\r\n    <application\r\n        android:allowBackup=\"true\"\r\n        android:dataExtractionRules=\"@xml/data_extraction_rules\"\r\n        android:fullBackupContent=\"@xml/backup_rules\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/Theme.MyHealthPassport\"\r\n        tools:targetApi=\"31\">\r\n        <activity\r\n            android:name=\"com.example.myhealthpassport.MainActivity\"\r\n            android:exported=\"true\"\r\n            android:label=\"@string/app_name\"\r\n            android:theme=\"@style/Theme.MyHealthPassport\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
--- a/app/src/main/AndroidManifest.xml	(revision 3b31d7d4d68eec37bca96d6b82e67a49df764548)
+++ b/app/src/main/AndroidManifest.xml	(date 1740948490243)
@@ -11,7 +11,7 @@
         android:allowBackup="true"
         android:dataExtractionRules="@xml/data_extraction_rules"
         android:fullBackupContent="@xml/backup_rules"
-        android:icon="@mipmap/ic_launcher"
+        android:icon="@drawable/medicalcheck"
         android:label="@string/app_name"
         android:roundIcon="@mipmap/ic_launcher_round"
         android:supportsRtl="true"
Index: app/src/main/java/com/example/myhealthpassport/aicompanion/ChatPage.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.myhealthpassport.aicompanion\r\n\r\nimport android.content.Context\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.foundation.lazy.rememberLazyListState\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.automirrored.filled.ArrowBack\r\nimport androidx.compose.material.icons.filled.Delete\r\nimport androidx.compose.material.icons.filled.Mic\r\nimport androidx.compose.material.icons.filled.Send\r\nimport androidx.compose.material3.*\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.lifecycle.viewmodel.compose.viewModel\r\nimport androidx.navigation.NavController\r\nimport androidx.navigation.compose.rememberNavController\r\nimport com.example.codewizard.aicompanion.MessageModel\r\nimport com.example.myhealthpassport.MainActivity\r\nimport kotlinx.coroutines.launch\r\n\r\n@Composable\r\nfun ChatPage(navController: NavController, context: Context, viewModel: ChatViewModel) {\r\n\r\n    Column(modifier = Modifier.fillMaxSize()) {\r\n\r\n        MessageList(modifier = Modifier.weight(1f), messageList = viewModel.messageList)\r\n\r\n           Row(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(8.dp),\r\n            horizontalArrangement = Arrangement.SpaceBetween\r\n        ) {\r\n            FloatingActionButton(onClick = { viewModel.clearChat() }, modifier = Modifier.padding(top = 8.dp)) {\r\n                Icon(imageVector = Icons.Default.Delete, contentDescription = \"Clear Chat\")\r\n            }\r\n            MessageInput(context, onMessageSend = { viewModel.sendMessage(it) })\r\n        }\r\n\r\n    }\r\n}\r\n\r\n@Composable\r\nfun MessageInput(context: Context, onMessageSend: (String) -> Unit) {\r\n    val speechContext = context as MainActivity\r\n    var message by remember { mutableStateOf(\"\") }\r\n\r\n    LaunchedEffect(speechContext.speechInput.value) {\r\n        if (speechContext.speechInput.value.isNotBlank()) {\r\n            message = speechContext.speechInput.value\r\n            speechContext.speechInput.value = \"\"\r\n        }\r\n    }\r\n\r\n    Row(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .padding(8.dp),\r\n        verticalAlignment = Alignment.CenterVertically\r\n    ) {\r\n        OutlinedTextField(\r\n            value = message,\r\n            onValueChange = { message = it },\r\n            modifier = Modifier.weight(1f),\r\n            placeholder = { Text(\"Type a message...\") }\r\n        )\r\n\r\n        IconButton(onClick = {\r\n            if (message.isNotBlank()) {\r\n                onMessageSend(message)\r\n                message = \"\"\r\n            }\r\n        }) {\r\n            Icon(imageVector = Icons.Default.Send, contentDescription = \"Send\")\r\n        }\r\n\r\n        FloatingActionButton(\r\n            onClick = { speechContext.askSpeechInput(context) },\r\n            modifier = Modifier.padding(start = 8.dp)\r\n        ) {\r\n            Icon(\r\n                imageVector = Icons.Default.Mic,\r\n                contentDescription = \"Voice Input\",\r\n                tint = Color.Yellow\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun MessageList(modifier: Modifier, messageList: List<MessageModel>) {\r\n    val listState = rememberLazyListState()\r\n    val coroutineScope = rememberCoroutineScope()\r\n\r\n    LaunchedEffect(messageList.size) {\r\n        if (messageList.isNotEmpty()) {\r\n            coroutineScope.launch {\r\n                listState.animateScrollToItem(messageList.size - 1)\r\n            }\r\n        }\r\n    }\r\n    LazyColumn(\r\n        modifier = modifier\r\n            .fillMaxSize()\r\n            .padding(horizontal = 8.dp),\r\n        state = listState,\r\n        reverseLayout = false\r\n    ) {\r\n        items(messageList) { message ->\r\n            MessageRow(message)\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun MessageRow(message: MessageModel) {\r\n    Row(\r\n        modifier = Modifier.fillMaxWidth(),\r\n        horizontalArrangement = if (message.role == \"user\") Arrangement.End else Arrangement.Start\r\n    ) {\r\n        Box(\r\n            modifier = Modifier\r\n                .padding(8.dp)\r\n                .clip(RoundedCornerShape(12.dp))\r\n                .background(if (message.role == \"user\") Color(0xFF007AFF) else Color(0xFFECECEC))\r\n                .padding(12.dp)\r\n                .widthIn(max = 250.dp)\r\n        ) {\r\n            Text(\r\n                text = message.message,\r\n                color = if (message.role == \"user\") Color.White else Color.Black,\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                fontWeight = FontWeight.Normal\r\n            )\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/myhealthpassport/aicompanion/ChatPage.kt b/app/src/main/java/com/example/myhealthpassport/aicompanion/ChatPage.kt
--- a/app/src/main/java/com/example/myhealthpassport/aicompanion/ChatPage.kt	(revision 3b31d7d4d68eec37bca96d6b82e67a49df764548)
+++ b/app/src/main/java/com/example/myhealthpassport/aicompanion/ChatPage.kt	(date 1741113956194)
@@ -31,7 +31,8 @@
 @Composable
 fun ChatPage(navController: NavController, context: Context, viewModel: ChatViewModel) {
 
-    Column(modifier = Modifier.fillMaxSize()) {
+    Column(modifier = Modifier.fillMaxSize()
+        .background(Color.White)) {
 
         MessageList(modifier = Modifier.weight(1f), messageList = viewModel.messageList)
 
@@ -41,8 +42,12 @@
                 .padding(8.dp),
             horizontalArrangement = Arrangement.SpaceBetween
         ) {
-            FloatingActionButton(onClick = { viewModel.clearChat() }, modifier = Modifier.padding(top = 8.dp)) {
-                Icon(imageVector = Icons.Default.Delete, contentDescription = "Clear Chat")
+            FloatingActionButton(onClick = { viewModel.clearChat() },
+                containerColor = Color(0xFFE9EFF9),
+                modifier = Modifier.padding(top = 8.dp)) {
+                Icon(imageVector = Icons.Default.Delete,
+                    contentDescription = "Clear Chat",
+                    tint = Color.Black)
             }
             MessageInput(context, onMessageSend = { viewModel.sendMessage(it) })
         }
@@ -72,7 +77,7 @@
             value = message,
             onValueChange = { message = it },
             modifier = Modifier.weight(1f),
-            placeholder = { Text("Type a message...") }
+            placeholder = { Text("Type a message...", color = Color.Gray) }
         )
 
         IconButton(onClick = {
@@ -81,17 +86,20 @@
                 message = ""
             }
         }) {
-            Icon(imageVector = Icons.Default.Send, contentDescription = "Send")
+            Icon(imageVector = Icons.Default.Send,
+                contentDescription = "Send",
+                tint = Color.Black)
         }
 
         FloatingActionButton(
             onClick = { speechContext.askSpeechInput(context) },
-            modifier = Modifier.padding(start = 8.dp)
+            modifier = Modifier.padding(start = 8.dp),
+            containerColor = Color(0xFFE9EFF9)
         ) {
             Icon(
                 imageVector = Icons.Default.Mic,
                 contentDescription = "Voice Input",
-                tint = Color.Yellow
+                tint = Color.Black
             )
         }
     }
Index: app/src/main/java/com/example/myhealthpassport/FlipAnimation.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.myhealthpassport\r\n\r\nimport androidx.compose.animation.animateColorAsState\r\nimport androidx.compose.animation.core.EaseInOut\r\nimport androidx.compose.animation.core.animateFloatAsState\r\nimport androidx.compose.animation.core.tween\r\nimport androidx.compose.foundation.BorderStroke\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.aspectRatio\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.automirrored.filled.KeyboardArrowRight\r\nimport androidx.compose.material.icons.filled.KeyboardArrowRight\r\nimport androidx.compose.material.icons.filled.KeyboardArrowUp\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.ButtonColors\r\nimport androidx.compose.material3.ElevatedCard\r\nimport androidx.compose.material3.ExtendedFloatingActionButton\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.OutlinedButton\r\nimport androidx.compose.material3.ShapeDefaults\r\nimport androidx.compose.material3.Shapes\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.alpha\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.draw.clipToBounds\r\nimport androidx.compose.ui.draw.scale\r\nimport androidx.compose.ui.graphics.Brush\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.graphics.Shape\r\nimport androidx.compose.ui.graphics.graphicsLayer\r\nimport androidx.compose.ui.graphics.vector.ImageVector\r\nimport androidx.compose.ui.layout.ContentScale\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.text.AnnotatedString\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.navigation.NavController\r\nimport androidx.navigation.compose.rememberNavController\r\nimport com.example.myhealthpassport.Navigation.Screen\r\n\r\n@Preview\r\n@Composable\r\nfun FlipAnimation1() {\r\n    var isCardFlipped by remember { mutableStateOf(false) }\r\n    val animDuration = 900\r\n    val zAxisDistance = 10f //distance between camera and Card\r\n\r\n    val frontColor by animateColorAsState(\r\n        targetValue = if (isCardFlipped) Color(0xFF789FFF) else Color(0xFF282A31),\r\n        animationSpec = tween(durationMillis = animDuration, easing = EaseInOut),\r\n        label = \"\"\r\n    )\r\n\r\n    // rotate Y-axis with animation\r\n    val rotateCardY by animateFloatAsState(\r\n        targetValue = if (isCardFlipped) 180f else 0f,\r\n        animationSpec = tween(durationMillis = animDuration, easing = EaseInOut),\r\n        label = \"\"\r\n    )\r\n\r\n    // text animation\r\n    val textAlpha by animateFloatAsState(\r\n        targetValue = if (isCardFlipped) 0f else 1f,\r\n        tween(durationMillis = 1500),\r\n        label = \"\"\r\n    )\r\n\r\n    Column(\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .background(Color.White),\r\n        verticalArrangement = Arrangement.Center,\r\n        horizontalAlignment = Alignment.CenterHorizontally\r\n    ) {\r\n        Box(\r\n            modifier = Modifier\r\n                .size(200.dp, 300.dp)\r\n                .graphicsLayer {\r\n                    rotationY = rotateCardY\r\n                    cameraDistance = zAxisDistance\r\n                }\r\n                .clip(RoundedCornerShape(24.dp))\r\n                .clickable { isCardFlipped = !isCardFlipped }\r\n                .background(frontColor)\r\n        )\r\n        Spacer(modifier = Modifier.height(32.dp))\r\n        Text(\r\n            modifier = Modifier.graphicsLayer {\r\n                alpha = if (isCardFlipped) 1f - textAlpha else textAlpha\r\n            },\r\n            text = if (isCardFlipped) \"Reveal\" else \"Hide\",\r\n            color = Color.Black,\r\n        )\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nfun FlipAnimation(navController: NavController) {\r\n    var isCardFlipped by remember { mutableStateOf(false) }\r\n    val animDuration = 900\r\n    val zAxisDistance = 10f\r\n    val gradient = Brush.horizontalGradient(\r\n        colors = listOf(Color(0xFF00BCD4), Color(0xFF1E88E5))\r\n    )\r\n\r\n    val rotateCardY by animateFloatAsState(\r\n        targetValue = if (isCardFlipped) 180f else 0f,\r\n        animationSpec = tween(durationMillis = animDuration, easing = EaseInOut),\r\n        label = \"\"\r\n    )\r\n\r\n    val frontImageAlpha by animateFloatAsState(\r\n        targetValue = if (isCardFlipped) 0f else 1f,\r\n        animationSpec = tween(durationMillis = animDuration, easing = EaseInOut),\r\n        label = \"\"\r\n    )\r\n\r\n    val backImageAlpha by animateFloatAsState(\r\n        targetValue = if (isCardFlipped) 1f else 0f,\r\n        animationSpec = tween(durationMillis = animDuration, easing = EaseInOut),\r\n        label = \"\"\r\n    )\r\n\r\n    val textAlpha by animateFloatAsState(\r\n        targetValue = if (isCardFlipped) 0f else 1f,\r\n        tween(durationMillis = 1500),\r\n        label = \"\"\r\n    )\r\n\r\n    Column(\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .background(Color.White),\r\n        verticalArrangement = Arrangement.Top,\r\n        horizontalAlignment = Alignment.CenterHorizontally\r\n    ) {\r\n        Column(modifier = Modifier.verticalScroll(rememberScrollState()).align(Alignment.CenterHorizontally)) {\r\n            Box(\r\n                modifier = Modifier\r\n                    .size(250.dp, 260.dp)\r\n                    .graphicsLayer {\r\n                        rotationY = rotateCardY\r\n                        cameraDistance = zAxisDistance\r\n                    }\r\n                    .clip(RoundedCornerShape(24.dp))\r\n                    .padding(top = 8.dp)\r\n                    .clickable { isCardFlipped = !isCardFlipped }\r\n                    .align(Alignment.CenterHorizontally)\r\n            ) {\r\n                Image(\r\n                    painter = painterResource(id = R.drawable.handsmedicaldoctor),\r\n                    contentDescription = \"Front Image\",\r\n                    modifier = Modifier\r\n                        .fillMaxSize()\r\n                        .graphicsLayer(alpha = frontImageAlpha),\r\n                    contentScale = ContentScale.FillBounds\r\n                )\r\n\r\n                Image(\r\n                    painter = painterResource(id = R.drawable.onlinedoctor),\r\n                    contentDescription = \"Back Image\",\r\n                    modifier = Modifier\r\n                        .fillMaxSize()\r\n                        .graphicsLayer(alpha = backImageAlpha)\r\n                        .scale(-1f, 1f),\r\n                    contentScale = ContentScale.FillBounds\r\n                )\r\n            }\r\n            Spacer(modifier = Modifier.height(32.dp))\r\n\r\n            if (isCardFlipped) {\r\n                OutlinedButton(\r\n                    onClick = {\r\n                        navController.navigate(Screen.HealthInfo.route)\r\n                    },\r\n                    border = BorderStroke(1.dp, color = Color.Blue),\r\n                    modifier = Modifier.align(Alignment.CenterHorizontally)\r\n                ) {\r\n                    Text(text = \"Save Data\", color = Color.Black)\r\n                }\r\n            } else OutlinedButton(\r\n                onClick = {\r\n                    navController.navigate(Screen.GetHealthInfo.route)\r\n                },\r\n                border = BorderStroke(1.dp, color = Color.Blue),\r\n                modifier = Modifier.align(Alignment.CenterHorizontally)\r\n            ) {\r\n                Text(text = \"Get Data\", color = Color.Black)\r\n            }\r\n\r\n            Text(\r\n                text = \"Emergency Contacts\",\r\n                fontWeight = FontWeight.W400,\r\n                color = Color.Black,\r\n                fontSize = 28.sp,\r\n                modifier = Modifier\r\n                    .align(Alignment.Start)\r\n                    .padding(top = 24.dp)\r\n                    .padding(start = 8.dp)\r\n            )\r\n            Row(modifier = Modifier.align(Alignment.Start).padding(start = 8.dp)) {\r\n\r\n                Text(\r\n                    text = AnnotatedString(\"Show Emergency Contacts\"),\r\n                    modifier = Modifier\r\n                        .padding(top = 12.dp),\r\n                    fontSize = 16.sp,\r\n                    color = Color.Gray,\r\n                    textAlign = TextAlign.Start,\r\n                )\r\n\r\n                IconButton(\r\n                    onClick = { navController.navigate(Screen.EmergencyContacts.route) },\r\n                    modifier = Modifier.padding(top = 0.dp)\r\n                ) {\r\n                    Icon(\r\n                        imageVector = Icons.AutoMirrored.Filled.KeyboardArrowRight,\r\n                        contentDescription = \"emergency contacts\",\r\n                        tint = Color.Black\r\n                    )\r\n                }\r\n            }\r\n\r\n//            Row(\r\n//                modifier = Modifier\r\n//                    .align(Alignment.Start)\r\n//                    .align(Alignment.CenterHorizontally)\r\n//                    .padding(start = 8.dp)\r\n//            ) {\r\n//                Text(\r\n//                    text = AnnotatedString(\"Store your data in Cloud\"),\r\n//                    fontWeight = FontWeight.W400,\r\n//                    color = Color.Black,\r\n//                    fontSize = 28.sp,\r\n//                    modifier = Modifier\r\n//                        .padding(top = 20.dp),\r\n//                )\r\n//                IconButton(\r\n//                    onClick = {\r\n//                        navController.navigate(Screen.ChartScreen.route)\r\n//                    },\r\n//                    modifier = Modifier.padding(top = 12.dp, start = 8.dp)\r\n//                ) {\r\n//                    Icon(\r\n//                        painter = painterResource(id = R.drawable.cloudservice),\r\n//                        contentDescription = \"cloud\",\r\n//                        tint = Color.Black\r\n//                    )\r\n//                }\r\n//            }\r\n\r\n            Row(\r\n                modifier = Modifier\r\n                    .align(Alignment.Start)\r\n                    .padding(horizontal = 4.dp)\r\n                    .padding(bottom = 8.dp)\r\n            ) {\r\n\r\n                Column(modifier = Modifier.padding(top = 4.dp).padding(start = 4.dp).weight(0.5f)) {\r\n                    ElevatedCard(\r\n                        onClick = { navController.navigate(Screen.ChatPage.route) },\r\n                        modifier = Modifier\r\n                            .padding(top = 16.dp, end = 4.dp, bottom = 8.dp)\r\n                            .background(color = Color.White)\r\n                    ) {\r\n                        Image(\r\n                            painter = painterResource(id = R.drawable.picturedoctorwithstethoscope),\r\n                            contentDescription = \"Doctor\",\r\n                            modifier = Modifier\r\n                                .size(200.dp)\r\n                                .align(Alignment.Start)\r\n                                .background(Color.White)\r\n                        )\r\n                    }\r\n                    Text(\r\n                        text = \"AI Symptom Checker\",\r\n                        textAlign = TextAlign.Center,\r\n                        color = Color.Gray,\r\n                        modifier = Modifier.align(Alignment.CenterHorizontally),\r\n                        fontSize = 12.sp\r\n                    )\r\n                }\r\n                Column(modifier = Modifier.padding(top = 4.dp).padding(end = 4.dp).weight(0.5f)) {\r\n                    ElevatedCard(\r\n                        onClick = { navController.navigate(Screen.HealthAiScreen.route) },\r\n                        modifier = Modifier\r\n                            .padding(top = 16.dp, start = 4.dp, bottom = 8.dp)\r\n                            .background(color = Color.White)\r\n                    ) {\r\n                        Image(\r\n                            painter = painterResource(id = R.drawable.groupmedicalstaff),\r\n                            contentDescription = \"MedicalStaff\",\r\n                            modifier = Modifier\r\n                                .size(200.dp)\r\n                                .align(Alignment.Start),\r\n                            contentScale = ContentScale.FillBounds\r\n                        )\r\n                    }\r\n                    Text(\r\n                        text = \"Medical Report Analyser\",\r\n                        textAlign = TextAlign.Center,\r\n                        color = Color.Gray,\r\n                        modifier = Modifier.align(Alignment.CenterHorizontally),\r\n                        fontSize = 12.sp\r\n                    )\r\n                }\r\n            }\r\n\r\n//        Text(\r\n//            modifier = Modifier.graphicsLayer {\r\n//                alpha = if (isCardFlipped) 1f - textAlpha else textAlpha\r\n//            },\r\n//            text = if (isCardFlipped) \"Reveal\" else \"Hide\",\r\n//            color = Color.Black,\r\n//        )\r\n        }\r\n    }\r\n}\r\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nfun FlipAnimation1Preview(){\r\n    FlipAnimation(navController = rememberNavController())\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/myhealthpassport/FlipAnimation.kt b/app/src/main/java/com/example/myhealthpassport/FlipAnimation.kt
--- a/app/src/main/java/com/example/myhealthpassport/FlipAnimation.kt	(revision 3b31d7d4d68eec37bca96d6b82e67a49df764548)
+++ b/app/src/main/java/com/example/myhealthpassport/FlipAnimation.kt	(date 1741286541303)
@@ -125,7 +125,7 @@
 @Composable
 fun FlipAnimation(navController: NavController) {
     var isCardFlipped by remember { mutableStateOf(false) }
-    val animDuration = 900
+    val animDuration = 9000
     val zAxisDistance = 10f
     val gradient = Brush.horizontalGradient(
         colors = listOf(Color(0xFF00BCD4), Color(0xFF1E88E5))
@@ -201,8 +201,8 @@
                     onClick = {
                         navController.navigate(Screen.HealthInfo.route)
                     },
-                    border = BorderStroke(1.dp, color = Color.Blue),
-                    modifier = Modifier.align(Alignment.CenterHorizontally)
+                    border = BorderStroke(1.dp, color = Color(0xFF1E88E5)),
+                    modifier = Modifier.align(Alignment.CenterHorizontally),
                 ) {
                     Text(text = "Save Data", color = Color.Black)
                 }
@@ -210,7 +210,7 @@
                 onClick = {
                     navController.navigate(Screen.GetHealthInfo.route)
                 },
-                border = BorderStroke(1.dp, color = Color.Blue),
+                border = BorderStroke(1.dp, color = Color(0xFF1E88E5)),
                 modifier = Modifier.align(Alignment.CenterHorizontally)
             ) {
                 Text(text = "Get Data", color = Color.Black)
Index: .idea/deploymentTargetSelector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetSelector\">\r\n    <selectionStates>\r\n      <SelectionState runConfigName=\"app\">\r\n        <option name=\"selectionMode\" value=\"DROPDOWN\" />\r\n        <DropdownSelection timestamp=\"2025-02-21T19:06:13.741944400Z\">\r\n          <Target type=\"DEFAULT_BOOT\">\r\n            <handle>\r\n              <DeviceId pluginId=\"LocalEmulator\" identifier=\"path=C:\\Users\\Anurag\\.android\\avd\\Pixel_5_API_34.avd\" />\r\n            </handle>\r\n          </Target>\r\n        </DropdownSelection>\r\n        <DialogSelection />\r\n      </SelectionState>\r\n      <SelectionState runConfigName=\"NavigationDrawerPreview\">\r\n        <option name=\"selectionMode\" value=\"DROPDOWN\" />\r\n      </SelectionState>\r\n      <SelectionState runConfigName=\"x\">\r\n        <option name=\"selectionMode\" value=\"DROPDOWN\" />\r\n      </SelectionState>\r\n      <SelectionState runConfigName=\"HealthInfoPreview\">\r\n        <option name=\"selectionMode\" value=\"DROPDOWN\" />\r\n      </SelectionState>\r\n      <SelectionState runConfigName=\"testc\">\r\n        <option name=\"selectionMode\" value=\"DROPDOWN\" />\r\n      </SelectionState>\r\n      <SelectionState runConfigName=\"PatientPreview\">\r\n        <option name=\"selectionMode\" value=\"DROPDOWN\" />\r\n      </SelectionState>\r\n    </selectionStates>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetSelector.xml b/.idea/deploymentTargetSelector.xml
--- a/.idea/deploymentTargetSelector.xml	(revision 3b31d7d4d68eec37bca96d6b82e67a49df764548)
+++ b/.idea/deploymentTargetSelector.xml	(date 1741266179617)
@@ -4,17 +4,14 @@
     <selectionStates>
       <SelectionState runConfigName="app">
         <option name="selectionMode" value="DROPDOWN" />
-        <DropdownSelection timestamp="2025-02-21T19:06:13.741944400Z">
+        <DropdownSelection timestamp="2025-03-06T12:59:53.820855900Z">
           <Target type="DEFAULT_BOOT">
             <handle>
-              <DeviceId pluginId="LocalEmulator" identifier="path=C:\Users\Anurag\.android\avd\Pixel_5_API_34.avd" />
+              <DeviceId pluginId="LocalEmulator" identifier="path=C:\Users\Anurag\.android\avd\Pixel_6a_API_34.avd" />
             </handle>
           </Target>
         </DropdownSelection>
         <DialogSelection />
-      </SelectionState>
-      <SelectionState runConfigName="NavigationDrawerPreview">
-        <option name="selectionMode" value="DROPDOWN" />
       </SelectionState>
       <SelectionState runConfigName="x">
         <option name="selectionMode" value="DROPDOWN" />
@@ -26,6 +23,9 @@
         <option name="selectionMode" value="DROPDOWN" />
       </SelectionState>
       <SelectionState runConfigName="PatientPreview">
+        <option name="selectionMode" value="DROPDOWN" />
+      </SelectionState>
+      <SelectionState runConfigName="EmergencyContactsListPreview">
         <option name="selectionMode" value="DROPDOWN" />
       </SelectionState>
     </selectionStates>
Index: app/src/main/java/com/example/myhealthpassport/Agent/AgentScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import androidx.compose.animation.AnimatedVisibility\r\nimport androidx.compose.animation.animateContentSize\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.automirrored.filled.ArrowBack\r\nimport androidx.compose.material.icons.filled.Add\r\nimport androidx.compose.material3.CircularProgressIndicator\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.ExtendedFloatingActionButton\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.OutlinedTextField\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TextFieldDefaults\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.livedata.observeAsState\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.draw.shadow\r\nimport androidx.compose.ui.graphics.Brush\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.text.AnnotatedString\r\nimport androidx.compose.ui.text.SpanStyle\r\nimport androidx.compose.ui.text.buildAnnotatedString\r\nimport androidx.compose.ui.text.font.FontStyle\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.text.withStyle\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.navigation.NavController\r\nimport androidx.navigation.compose.rememberNavController\r\nimport com.example.myhealthpassport.Navigation.Screen\r\nimport com.example.myhealthpassport.ViewModels.AgentViewModel\r\nimport com.example.myhealthpassport.ViewModels.HealthViewModel\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun AgentScreen(navController: NavController, agentViewModel: AgentViewModel, healthViewModel: HealthViewModel) {\r\n\r\n    var query by remember { mutableStateOf(\"\") }\r\n    var loading by remember { mutableStateOf(false) }\r\n\r\n    val agentResponse by agentViewModel.agentResponse.observeAsState()\r\n\r\n    var medicalID by remember { mutableStateOf(\"\") }\r\n    var name: String by remember { mutableStateOf(\"\") }\r\n    var bloodGroup: String by remember { mutableStateOf(\"\") }\r\n    var age: String by remember { mutableStateOf(\"\") }\r\n\r\n    var systolicBP by remember { mutableStateOf<Int?>(null) }\r\n    var diastolicBP by remember { mutableStateOf<Int?>(null) }\r\n\r\n    var bloodSugarLevel by remember { mutableStateOf(\"\") }\r\n    var gender: String by remember { mutableStateOf(\"\") }\r\n    var healthCondition: String by remember { mutableStateOf(\"\") }\r\n    var allergies: String by remember { mutableStateOf(\"\") }\r\n    var medications: String by remember { mutableStateOf(\"\") }\r\n    var weight by remember { mutableStateOf(\"\") }\r\n    var height by remember { mutableStateOf(\"\") }\r\n    var queryAdd by remember { mutableStateOf(\"\") }\r\n\r\n    val gradient = Brush.horizontalGradient(\r\n        colors = listOf(Color(0xFF00BCD4), Color(0xFF1E88E5))\r\n    )\r\n\r\n    val context = LocalContext.current\r\n\r\n    Column(\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .background(color = Color.White)\r\n            .verticalScroll(rememberScrollState())\r\n    ) {\r\n        Text(text = \"Get your Personalized Diet\" +\r\n                \" with Exercise Recommendation Plan by our Agent...\",\r\n            modifier = Modifier.padding(16.dp)\r\n                .align(Alignment.CenterHorizontally),\r\n            fontWeight = FontWeight.Light,\r\n            color = Color.Black,\r\n            fontSize = 24.sp)\r\n\r\n        Row(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 16.dp),\r\n            verticalAlignment = Alignment.CenterVertically,\r\n        ) {\r\n            Spacer(modifier = Modifier.fillMaxWidth(0.4f))\r\n            OutlinedTextField(\r\n                modifier = Modifier.weight(0.5f),\r\n                value = medicalID,\r\n                onValueChange = { medicalID = it },\r\n                label = {\r\n                    Text(text = \"MedicalID\")\r\n                },\r\n                colors = TextFieldDefaults.outlinedTextFieldColors(\r\n                    focusedBorderColor = Color.Blue,\r\n                    unfocusedBorderColor = Color.Gray,\r\n                    cursorColor = Color.Blue,\r\n                    focusedTextColor = Color.Black,\r\n                    focusedPlaceholderColor = Color.Gray,\r\n                    errorTextColor = Color.Red\r\n                ),\r\n            )\r\n            ExtendedFloatingActionButton(\r\n                modifier = Modifier\r\n                    .padding(start = 8.dp)\r\n                    .background(gradient, shape = RoundedCornerShape(8.dp)),\r\n                onClick = {\r\n                    healthViewModel.retrieveHealthData(\r\n                        medicalID = medicalID,\r\n                        context = context\r\n                    ) { data ->\r\n                        name = data.name\r\n                        bloodGroup = data.bloodGroup\r\n                        age = data.age.toString()\r\n                        systolicBP = data.systolicBP\r\n                        diastolicBP = data.diastolicBP\r\n                        bloodSugarLevel = data.bloodSugarLevel.toString()\r\n                        weight = data.weight.toString()\r\n                        height = data.height.toString()\r\n                        gender = data.gender\r\n                        healthCondition = data.healthCondition\r\n                        allergies = data.allergies\r\n                        medications = data.medications\r\n                    }\r\n                    queryAdd = \"I am $name, have $bloodGroup, $age years old,\" + \"Blood Pressure: $systolicBP/$diastolicBP\"+\r\n                            \" weigh $weight Kg, height $height, gender $gender,\" +\r\n                            \" health condition $healthCondition,\" +\r\n                            \" allergies $allergies, medications $medications. \"\r\n\r\n                    loading = true // Set loading to true when button is clicked\r\n                    agentViewModel.sendQueryToAgent(queryAdd + query)\r\n                }\r\n            ) {\r\n                Text(text = \"Get Plan\", textAlign = TextAlign.Center)\r\n            }\r\n        }\r\n\r\n        Column(modifier = Modifier\r\n            .padding(horizontal = 8.dp)\r\n            .weight(0.6f)\r\n            .verticalScroll(rememberScrollState())\r\n        ) {\r\n            // Display the agent's response or show a loading indicator\r\n            if (loading) {\r\n                CircularProgressIndicator(\r\n                    modifier = Modifier\r\n                        .size(160.dp)\r\n                        .padding(36.dp),\r\n                    strokeWidth = 8.dp\r\n                )\r\n            } else {\r\n                agentResponse?.let { result ->\r\n                    when {\r\n                        result.isSuccess -> {\r\n                            Text(\r\n                                text = formatText(result.getOrNull() ?: \"No content\"),\r\n                                modifier = Modifier.padding(top = 20.dp, bottom = 20.dp),\r\n                                fontSize = 20.sp,\r\n                                fontWeight = FontWeight.W400,\r\n                                fontStyle = FontStyle.Italic,\r\n                                color = Color.Black\r\n                            )\r\n                        }\r\n                        result.isFailure -> {\r\n                            Text(\r\n                                text = \"Error: ${result.exceptionOrNull()?.message}\",\r\n                                modifier = Modifier.padding(top = 20.dp, bottom = 20.dp),\r\n                                color = Color.Red\r\n                            )\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        Row(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(bottom = 8.dp)\r\n                .animateContentSize(), // Animate size changes\r\n            verticalAlignment = Alignment.CenterVertically,\r\n        ) {\r\n            var check by remember { mutableStateOf(false) }\r\n\r\n            Box(modifier = Modifier.padding(horizontal = 4.dp)) {\r\n                IconButton(\r\n                    onClick = {\r\n                        check = !check\r\n                    },\r\n                    modifier = Modifier\r\n                        .background(brush = gradient, shape = RoundedCornerShape(100))\r\n                        .shadow(elevation = 36.dp)\r\n                ) {\r\n                    Icon(\r\n                        imageVector = Icons.Filled.Add, contentDescription = \"\",\r\n                        modifier = Modifier.clip(shape = RoundedCornerShape(100))\r\n                            .background(color = Color.Transparent, shape = RoundedCornerShape(100)),\r\n                        tint = Color.White\r\n                    )\r\n                }\r\n            }\r\n\r\n            // Animate visibility of the TextField and Floating Action Button\r\n            AnimatedVisibility(visible = check) {\r\n                Row(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .padding(horizontal = 4.dp)\r\n                        .padding(end = 4.dp),\r\n                    verticalAlignment = Alignment.CenterVertically\r\n                ) {\r\n                    OutlinedTextField(\r\n                        value = query,\r\n                        onValueChange = { newValue -> query = newValue },\r\n                        label = { Text(\"Add additional info\") },\r\n                        modifier = Modifier\r\n                            .padding(end = 8.dp)\r\n                            .weight(0.5f),\r\n                        colors = TextFieldDefaults.outlinedTextFieldColors(\r\n                            focusedBorderColor = Color.Blue,\r\n                            unfocusedBorderColor = Color.Gray,\r\n                            cursorColor = Color.Blue,\r\n                            focusedTextColor = Color.Black,\r\n                            focusedPlaceholderColor = Color.Gray,\r\n                            errorTextColor = Color.Red\r\n                        ),\r\n                    )\r\n\r\n                    queryAdd = \"I am $name, have $bloodGroup, $age years old,\" +\r\n                            \" weigh $weight Kg, height $height, gender $gender,\" +\r\n                            \" health condition $healthCondition,\" +\r\n                            \" allergies $allergies, medications $medications. \"\r\n\r\n                    // Button to trigger the query\r\n                    ExtendedFloatingActionButton(\r\n                        onClick = {\r\n                            loading = true // Set loading to true when button is clicked\r\n                            agentViewModel.sendQueryToAgent(queryAdd + query)\r\n                        },\r\n                        modifier = Modifier\r\n                            .background(brush = gradient, shape = RoundedCornerShape(8.dp))\r\n                    ) {\r\n                        Text(\"Send Query\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n//        // Display the agent's response or show a loading indicator\r\n//        if (loading) {\r\n//            CircularProgressIndicator(\r\n//                modifier = Modifier\r\n//                    .size(160.dp)\r\n//                    .padding(36.dp),\r\n//                strokeWidth = 8.dp\r\n//            )\r\n//        } else {\r\n//            agentResponse?.let { result ->\r\n//                when {\r\n//                    result.isSuccess -> {\r\n//                        Text(\r\n//                            text = formatText(result.getOrNull() ?: \"No content\"),\r\n//                            modifier = Modifier.padding(top = 20.dp),\r\n//                            fontSize = 16.sp,\r\n//                            fontWeight = FontWeight.W400\r\n//                        )\r\n//                    }\r\n//                    result.isFailure -> {\r\n//                        Text(\r\n//                            text = \"Error: ${result.exceptionOrNull()?.message}\",\r\n//                            modifier = Modifier.padding(top = 20.dp),\r\n//                            color = Color.Red\r\n//                        )\r\n//                    }\r\n//                }\r\n//            }\r\n//        }\r\n\r\n        // Set loading to false when response is received\r\n        LaunchedEffect(agentResponse) {\r\n            agentResponse?.let {\r\n                loading = false\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Function to format text by bolding and enlarging words enclosed in **\r\n@Composable\r\nfun formatText(text: String): AnnotatedString {\r\n    return buildAnnotatedString {\r\n        var currentIndex = 0\r\n\r\n        // Split the text by **\r\n        val parts = text.split(\"**\")\r\n\r\n        parts.forEachIndexed { index, part ->\r\n            if (index % 2 == 0) {\r\n                // Regular text (outside of **)\r\n                append(part)\r\n            } else {\r\n                // Bold and larger text (inside **)\r\n                withStyle(style = SpanStyle(fontWeight = FontWeight.W400, fontSize = 28.sp)) {\r\n                    append(part)\r\n                }\r\n            }\r\n            currentIndex += part.length\r\n        }\r\n    }\r\n}\r\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nfun AgentScreenPreview() {\r\n    AgentScreen(navController = rememberNavController(), agentViewModel = AgentViewModel(), healthViewModel = HealthViewModel())\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/myhealthpassport/Agent/AgentScreen.kt b/app/src/main/java/com/example/myhealthpassport/Agent/AgentScreen.kt
--- a/app/src/main/java/com/example/myhealthpassport/Agent/AgentScreen.kt	(revision 3b31d7d4d68eec37bca96d6b82e67a49df764548)
+++ b/app/src/main/java/com/example/myhealthpassport/Agent/AgentScreen.kt	(date 1741114032992)
@@ -112,7 +112,7 @@
                 value = medicalID,
                 onValueChange = { medicalID = it },
                 label = {
-                    Text(text = "MedicalID")
+                    Text(text = "MedicalID", color = Color.Gray)
                 },
                 colors = TextFieldDefaults.outlinedTextFieldColors(
                     focusedBorderColor = Color.Blue,
@@ -127,6 +127,7 @@
                 modifier = Modifier
                     .padding(start = 8.dp)
                     .background(gradient, shape = RoundedCornerShape(8.dp)),
+                containerColor = Color(0xFFE9EFF9),
                 onClick = {
                     healthViewModel.retrieveHealthData(
                         medicalID = medicalID,
@@ -154,7 +155,7 @@
                     agentViewModel.sendQueryToAgent(queryAdd + query)
                 }
             ) {
-                Text(text = "Get Plan", textAlign = TextAlign.Center)
+                Text(text = "Get Plan", textAlign = TextAlign.Center, color = Color.Black)
             }
         }
 
@@ -235,7 +236,7 @@
                     OutlinedTextField(
                         value = query,
                         onValueChange = { newValue -> query = newValue },
-                        label = { Text("Add additional info") },
+                        label = { Text("Add additional info", color = Color.Gray) },
                         modifier = Modifier
                             .padding(end = 8.dp)
                             .weight(0.5f),
@@ -260,10 +261,11 @@
                             loading = true // Set loading to true when button is clicked
                             agentViewModel.sendQueryToAgent(queryAdd + query)
                         },
+                        containerColor = Color(0xFFE9EFF9),
                         modifier = Modifier
                             .background(brush = gradient, shape = RoundedCornerShape(8.dp))
                     ) {
-                        Text("Send Query")
+                        Text("Send Query", color = Color.Black)
                     }
                 }
             }
Index: app/src/main/java/com/example/myhealthpassport/Composables/HealthAiScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.myhealthpassport.Composables\r\n\r\nimport android.Manifest\r\nimport android.content.Context\r\nimport android.graphics.Bitmap\r\nimport android.graphics.BitmapFactory\r\nimport android.net.Uri\r\nimport android.os.Build\r\nimport android.util.Log\r\nimport android.widget.Toast\r\nimport androidx.activity.compose.rememberLauncherForActivityResult\r\nimport androidx.activity.result.ActivityResultLauncher\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.compose.foundation.BorderStroke\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.foundation.text.KeyboardOptions\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.ButtonColors\r\nimport androidx.compose.material3.CircularProgressIndicator\r\nimport androidx.compose.material3.ElevatedButton\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.ExtendedFloatingActionButton\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.OutlinedTextField\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TextFieldColors\r\nimport androidx.compose.material3.TextFieldDefaults\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Brush\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.graphics.asImageBitmap\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.AnnotatedString\r\nimport androidx.compose.ui.text.SpanStyle\r\nimport androidx.compose.ui.text.buildAnnotatedString\r\nimport androidx.compose.ui.text.font.FontStyle\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.input.KeyboardType\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.text.withStyle\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.core.content.PermissionChecker\r\nimport androidx.lifecycle.viewmodel.compose.viewModel\r\nimport androidx.navigation.NavController\r\nimport androidx.navigation.compose.rememberNavController\r\nimport com.example.myhealthpassport.R\r\nimport com.example.myhealthpassport.ViewModels.AiViewModel\r\nimport com.example.myhealthpassport.ViewModels.HealthViewModel\r\nimport dev.romainguy.kotlin.math.all\r\nimport java.io.InputStream\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun HealthAiScreen(navController: NavController, aiViewModel: AiViewModel = viewModel()){\r\n\r\n    val healthViewModel: HealthViewModel = viewModel()\r\n\r\n    val context = LocalContext.current\r\n    var selectedImageUri by remember { mutableStateOf<Uri?>(null) }\r\n    var bitmap by remember { mutableStateOf<Bitmap?>(null) }\r\n    val placeholderResult = stringResource(R.string.results_placeholder)\r\n    val prompt2 = stringResource(R.string.prompt2)\r\n    val prompt1 = stringResource(R.string.prompt1)\r\n    var result by rememberSaveable { mutableStateOf(placeholderResult) }\r\n    val uiState by aiViewModel.uiState.collectAsState()\r\n\r\n    var userHealthData by remember { mutableStateOf<UserHealthData?>(null) }\r\n    var medicalID by rememberSaveable { mutableStateOf(\"\") }\r\n\r\n    var isExtraction by remember { mutableStateOf(false) }\r\n    var isAnalysis by remember { mutableStateOf(false) }\r\n\r\n    val gradient2 = Brush.horizontalGradient(\r\n        colors = listOf(Color(0xFF00BCD4), Color(0xFF1E88E5))\r\n    )\r\n\r\n    val gradient = Brush.linearGradient(\r\n        colors = listOf(Color(0xFFF2F5F7),Color(0xFF7FE2F0))\r\n    )\r\n\r\n    val getImageLauncher = rememberLauncherForActivityResult(\r\n        ActivityResultContracts.GetContent()\r\n    ) { uri: Uri? ->\r\n        uri?.let {\r\n            selectedImageUri = it\r\n            val inputStream: InputStream? = context.contentResolver.openInputStream(uri)\r\n            bitmap = BitmapFactory.decodeStream(inputStream)\r\n        }\r\n    }\r\n\r\n    val requestPermissionLauncher = rememberLauncherForActivityResult(\r\n        ActivityResultContracts.RequestMultiplePermissions()\r\n    ) { permissions ->\r\n        val granted = permissions[Manifest.permission.READ_MEDIA_IMAGES] ?: false\r\n                || permissions[Manifest.permission.READ_EXTERNAL_STORAGE] ?: false\r\n\r\n        if (granted) {\r\n            openGallery(context, getImageLauncher)\r\n        } else {\r\n            Toast.makeText(context, \"Permission denied\", Toast.LENGTH_SHORT).show()\r\n        }\r\n    }\r\n\r\n    LaunchedEffect(Unit) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) { // Android 13+\r\n            if (ContextCompat.checkSelfPermission(context, Manifest.permission.READ_MEDIA_IMAGES)\r\n                != PermissionChecker.PERMISSION_GRANTED\r\n            ) {\r\n                requestPermissionLauncher.launch(arrayOf(Manifest.permission.READ_MEDIA_IMAGES))\r\n            }\r\n        } else {\r\n            if (ContextCompat.checkSelfPermission(context, Manifest.permission.READ_EXTERNAL_STORAGE)\r\n                != PermissionChecker.PERMISSION_GRANTED\r\n            ) {\r\n                requestPermissionLauncher.launch(arrayOf(Manifest.permission.READ_EXTERNAL_STORAGE))\r\n            }\r\n        }\r\n    }\r\n\r\n    Column(\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .background(brush = gradient)\r\n            .verticalScroll(rememberScrollState())\r\n    ) {\r\n        Text(\r\n            text = \"Medical Report Analyser\",\r\n            style = MaterialTheme.typography.titleLarge,\r\n            modifier = Modifier\r\n                .padding(28.dp)\r\n                .padding(top = 8.dp)\r\n                .align(Alignment.CenterHorizontally),\r\n            color = Color.Black,\r\n            fontSize = 32.sp,\r\n            fontStyle = FontStyle.Normal\r\n        )\r\n\r\n        ExtendedFloatingActionButton(\r\n            onClick = {\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\r\n                    if (ContextCompat.checkSelfPermission(\r\n                            context, Manifest.permission.READ_MEDIA_IMAGES\r\n                        ) == PermissionChecker.PERMISSION_GRANTED\r\n                    ) {\r\n                        openGallery(context, getImageLauncher)\r\n                    } else {\r\n                        requestPermissionLauncher.launch(arrayOf(Manifest.permission.READ_MEDIA_IMAGES))\r\n                    }\r\n                } else {\r\n                    if (ContextCompat.checkSelfPermission(\r\n                            context, Manifest.permission.READ_EXTERNAL_STORAGE\r\n                        ) == PermissionChecker.PERMISSION_GRANTED\r\n                    ) {\r\n                        openGallery(context, getImageLauncher)\r\n                    } else {\r\n                        requestPermissionLauncher.launch(arrayOf(Manifest.permission.READ_EXTERNAL_STORAGE))\r\n                    }\r\n                }\r\n            },\r\n            modifier = Modifier\r\n                .padding(vertical = 16.dp)\r\n                .background(brush = gradient2, shape = RoundedCornerShape(9.dp))\r\n                .align(Alignment.CenterHorizontally)\r\n        ) {\r\n            Text(text = \"Select an Image\")\r\n        }\r\n\r\n        selectedImageUri?.let {\r\n            bitmap?.asImageBitmap()?.let { it1 ->\r\n                Image(\r\n                    bitmap = it1,\r\n                    contentDescription = null,\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .size(250.dp)\r\n                        .padding(16.dp)\r\n                )\r\n            }\r\n        }\r\n\r\n        Row(\r\n            modifier = Modifier\r\n                .padding(16.dp)\r\n                .fillMaxWidth()\r\n                .align(Alignment.CenterHorizontally),\r\n            horizontalArrangement = Arrangement.Center,\r\n            verticalAlignment = Alignment.CenterVertically\r\n        ) {\r\n\r\n            ElevatedButton(\r\n                onClick = {\r\n                    bitmap?.let { bmp ->\r\n                        aiViewModel.sendPrompt(bmp, prompt2)\r\n                    }\r\n                    isExtraction=true\r\n                    isAnalysis=false\r\n                }\r\n                ,\r\n                enabled = prompt2.isNotEmpty() && bitmap != null,\r\n                modifier = Modifier\r\n                    .padding(4.dp)\r\n                    .align(Alignment.CenterVertically),\r\n                colors = ButtonColors(\r\n                    disabledContainerColor = Color.Red,\r\n                    containerColor = Color.Blue,\r\n                    contentColor = Color.White,\r\n                    disabledContentColor = Color.White\r\n                ),\r\n                border = BorderStroke(2.dp, Color.White)\r\n            ) {\r\n                Text(text = \"Extraction\")\r\n            }\r\n\r\n            ElevatedButton(\r\n                onClick = {\r\n                    bitmap?.let { bmp ->\r\n                        aiViewModel.sendPrompt(bmp, prompt1)\r\n                    }\r\n                    isAnalysis=true\r\n                    isExtraction=false\r\n                },\r\n                enabled = prompt1.isNotEmpty() && bitmap != null,\r\n                modifier = Modifier\r\n                    .align(Alignment.CenterVertically)\r\n                    .padding(4.dp),\r\n                colors = ButtonColors(\r\n                    disabledContainerColor = Color.Red,\r\n                    containerColor = Color.Blue,\r\n                    contentColor = Color.White,\r\n                    disabledContentColor = Color.White\r\n                ),\r\n                border = BorderStroke(2.dp, Color.White)\r\n            ) {\r\n                Text(text = \"Analyze\")\r\n            }\r\n        }\r\n\r\n        if (uiState is UiState.Loading) {\r\n            CircularProgressIndicator(modifier = Modifier.align(Alignment.CenterHorizontally))\r\n        } else {\r\n            var textColor = Color.Black\r\n            if (uiState is UiState.Error) {\r\n                textColor = MaterialTheme.colorScheme.error\r\n                result = (uiState as UiState.Error).errorMessage\r\n            } else if (uiState is UiState.Success) {\r\n                textColor = MaterialTheme.colorScheme.onSurface\r\n                result = (uiState as UiState.Success).outputText\r\n            }\r\n                if (isExtraction==true) {\r\n                    val extractedJson = aiViewModel.extractJsonObject(result.trimIndent())\r\n                    userHealthData = aiViewModel.extractMedicalReport(extractedJson)\r\n\r\n\r\n                    Column(modifier = Modifier.padding(16.dp)) {\r\n                        Text(\r\n                            text = \"Extracted Data:\\n\",\r\n                            modifier = Modifier.padding(top = 16.dp, end = 16.dp),\r\n                            color = Color.Black\r\n                        )\r\n                        userHealthData.let {\r\n                            Text(\"Name: ${it?.name}\", color = Color.Black)\r\n                            Text(\"Blood Group: ${it?.bloodGroup}\", color = Color.Black)\r\n                            Text(\"Age: ${it?.age}\", color = Color.Black)\r\n                            Text(\"Blood Pressure: ${it?.systolicBP}/${it?.diastolicBP}\", color = Color.Black)\r\n                            Text(\"Blood Sugar Level: ${it?.bloodSugarLevel}\", color = Color.Black)\r\n                            Text(\"Weight: ${it?.weight}\", color = Color.Black)\r\n                            Text(\"Height: ${it?.height}\", color = Color.Black)\r\n                            Text(\"Gender: ${it?.gender}\", color = Color.Black)\r\n                            Text(\"Health Condition: ${it?.healthCondition}\", color = Color.Black)\r\n                            Text(\r\n                                \"Emergency Phone: ${it?.emergencyPhoneNumber}\",\r\n                                color = Color.Black\r\n                            )\r\n                            Text(\"Address: ${it?.address}\", color = Color.Black)\r\n                            Text(\"Allergies: ${it?.allergies}\", color = Color.Black)\r\n                            Text(\"Medications: ${it?.medications}\", color = Color.Black)\r\n                        }\r\n                    }\r\n\r\n                    if (userHealthData != null) {\r\n                        Column(modifier = Modifier.padding(16.dp)) {\r\n                            Text(\"Enter Medical ID:\", color = Color.Black)\r\n                            OutlinedTextField(\r\n                                value = medicalID,\r\n                                onValueChange = { medicalID = it },\r\n                                label = { Text(\"Medical ID\") },\r\n                                modifier = Modifier.fillMaxWidth(),\r\n                                colors = TextFieldDefaults.outlinedTextFieldColors(\r\n                                    focusedTextColor = Color.Black,\r\n                                    unfocusedTextColor = Color.Gray,\r\n                                    focusedLabelColor = Color.Black,\r\n                                    unfocusedLabelColor = Color.Black,\r\n                                    disabledBorderColor = Color.Black,\r\n                                    focusedBorderColor = Color.Black,\r\n                                    unfocusedBorderColor = Color.Black\r\n                                )\r\n                            )\r\n\r\n                            Button(\r\n                                onClick = {\r\n                                    userHealthData?.let {\r\n                                        healthViewModel.saveHealthData(\r\n                                            it.copy(medicalID = medicalID),\r\n                                            context\r\n                                        )\r\n                                    }\r\n                                },\r\n                                modifier = Modifier.align(Alignment.CenterHorizontally)\r\n                            ) {\r\n                                Text(\"Save Data\")\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n            if (isAnalysis==true){\r\n                Text(\r\n                    text = formatText(result).text,\r\n                    textAlign = TextAlign.Start,\r\n                    modifier = Modifier\r\n                        .align(Alignment.Start)\r\n                        .padding(bottom = 4.dp)\r\n                        .padding(horizontal = 16.dp)\r\n                        .fillMaxSize(),\r\n                    color = Color.Black\r\n                )\r\n            }\r\n        }\r\n    }\r\n    }\r\n\r\nprivate fun openGallery(context: Context, getImageLauncher: ActivityResultLauncher<String>) {\r\n    getImageLauncher.launch(\"image/*\")\r\n}\r\n\r\n@Composable\r\nfun formatText(text: String): AnnotatedString {\r\n    return buildAnnotatedString {\r\n        var currentIndex = 0\r\n\r\n        val parts = text.split(\"**\")\r\n\r\n        parts.forEachIndexed { index, part ->\r\n            if (index % 2 == 0) {\r\n                append(part)\r\n            } else {\r\n                withStyle(style = SpanStyle(fontWeight = FontWeight.W400, fontSize = 20.sp)) {\r\n                    append(part)\r\n                }\r\n            }\r\n            currentIndex += part.length\r\n        }\r\n    }\r\n}\r\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nfun HealthAiScreenPreview(){\r\n    HealthAiScreen(navController = rememberNavController())\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/myhealthpassport/Composables/HealthAiScreen.kt b/app/src/main/java/com/example/myhealthpassport/Composables/HealthAiScreen.kt
--- a/app/src/main/java/com/example/myhealthpassport/Composables/HealthAiScreen.kt	(revision 3b31d7d4d68eec37bca96d6b82e67a49df764548)
+++ b/app/src/main/java/com/example/myhealthpassport/Composables/HealthAiScreen.kt	(date 1741601224599)
@@ -14,6 +14,7 @@
 import androidx.compose.foundation.BorderStroke
 import androidx.compose.foundation.Image
 import androidx.compose.foundation.background
+import androidx.compose.foundation.border
 import androidx.compose.foundation.layout.Arrangement
 import androidx.compose.foundation.layout.Column
 import androidx.compose.foundation.layout.Row
@@ -54,6 +55,7 @@
 import androidx.compose.ui.res.stringResource
 import androidx.compose.ui.text.AnnotatedString
 import androidx.compose.ui.text.SpanStyle
+import androidx.compose.ui.text.TextStyle
 import androidx.compose.ui.text.buildAnnotatedString
 import androidx.compose.ui.text.font.FontStyle
 import androidx.compose.ui.text.font.FontWeight
@@ -103,6 +105,18 @@
         colors = listOf(Color(0xFFF2F5F7),Color(0xFF7FE2F0))
     )
 
+    val outlinedFieldColors = TextFieldDefaults.textFieldColors(
+        containerColor = Color.Transparent,
+        unfocusedIndicatorColor = Color.Transparent,
+        focusedIndicatorColor = Color.Transparent,
+        focusedTextColor = Color(0xFF181411),
+        cursorColor = Color(0xFF1E88E5) // Blue for cursor
+    )
+
+    val rowModifier = Modifier
+        .padding(top = 12.dp)
+        .background(Color(0xFFB2EBF2).copy(alpha = 0.3f), shape = RoundedCornerShape(12.dp))
+
     val getImageLauncher = rememberLauncherForActivityResult(
         ActivityResultContracts.GetContent()
     ) { uri: Uri? ->
@@ -184,10 +198,11 @@
             },
             modifier = Modifier
                 .padding(vertical = 16.dp)
-                .background(brush = gradient2, shape = RoundedCornerShape(9.dp))
-                .align(Alignment.CenterHorizontally)
+                .background(brush = gradient2, shape = RoundedCornerShape(8.dp))
+                .align(Alignment.CenterHorizontally),
+            containerColor = Color(0xFFE9E9F9)
         ) {
-            Text(text = "Select an Image")
+            Text(text = "Select an Image", color = Color.Black)
         }
 
         selectedImageUri?.let {
@@ -261,7 +276,20 @@
         }
 
         if (uiState is UiState.Loading) {
-            CircularProgressIndicator(modifier = Modifier.align(Alignment.CenterHorizontally))
+
+            Row(modifier = Modifier
+                .align(Alignment.CenterHorizontally)
+                .padding(16.dp),
+                verticalAlignment = Alignment.CenterVertically,
+                horizontalArrangement = Arrangement.Center
+            ) {
+                if (isExtraction) {
+                    Text(text = "Extracting Data...", modifier = Modifier.padding(end = 16.dp))
+                } else if (isAnalysis) {
+                    Text(text = "Analyzing Data...", modifier = Modifier.padding(end = 16.dp))
+                }
+                CircularProgressIndicator(modifier = Modifier)
+            }
         } else {
             var textColor = Color.Black
             if (uiState is UiState.Error) {
@@ -304,24 +332,30 @@
 
                     if (userHealthData != null) {
                         Column(modifier = Modifier.padding(16.dp)) {
-                            Text("Enter Medical ID:", color = Color.Black)
-                            OutlinedTextField(
-                                value = medicalID,
-                                onValueChange = { medicalID = it },
-                                label = { Text("Medical ID") },
-                                modifier = Modifier.fillMaxWidth(),
-                                colors = TextFieldDefaults.outlinedTextFieldColors(
-                                    focusedTextColor = Color.Black,
-                                    unfocusedTextColor = Color.Gray,
-                                    focusedLabelColor = Color.Black,
-                                    unfocusedLabelColor = Color.Black,
-                                    disabledBorderColor = Color.Black,
-                                    focusedBorderColor = Color.Black,
-                                    unfocusedBorderColor = Color.Black
-                                )
-                            )
+
+                            Text("Enter Medical ID:",
+                                fontWeight = FontWeight.W500,
+                                color = Color.Black,
+                                modifier = Modifier.align(Alignment.Start),
+                                fontSize = 16.sp)
+
+                            Row(modifier = rowModifier,
+                                verticalAlignment = Alignment.CenterVertically
+                            ) {
+                                OutlinedTextField(
+                                    value = medicalID,
+                                    onValueChange = { medicalID = it },
+                                    label = { Text("Medical ID", color = Color.Gray) },
+                                    modifier = Modifier
+                                        .fillMaxWidth()
+                                        .border(width = 1.dp, color = Color.Gray, shape = RoundedCornerShape(12.dp))
+                                        .background(Color.Transparent),
+                                    colors = outlinedFieldColors,
+                                    textStyle = TextStyle(fontSize = 18.sp),
+                                    )
+                            }
 
-                            Button(
+                            ExtendedFloatingActionButton(
                                 onClick = {
                                     userHealthData?.let {
                                         healthViewModel.saveHealthData(
@@ -330,7 +364,11 @@
                                         )
                                     }
                                 },
-                                modifier = Modifier.align(Alignment.CenterHorizontally)
+                                modifier = Modifier
+                                    .padding(top = 12.dp)
+                                    .background(brush = gradient2, shape = RoundedCornerShape(8.dp))
+                                    .align(Alignment.CenterHorizontally),
+                                containerColor = Color(0xFFE9E9F9)
                             ) {
                                 Text("Save Data")
                             }
